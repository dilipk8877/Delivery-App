import React, { ReactNode } from 'react';
import { CCalendarProps } from '../calendar/CCalendar';
import { CPickerProps } from '../picker/CPicker';
import { Colors } from '../Types';
export interface CDateRangePickerProps extends Omit<CPickerProps, 'autoClose' | 'component' | 'dark' | 'placeholder' | 'variant'>, Omit<CCalendarProps, 'onCalendarCellHover' | 'onCalendarDateChange'> {
    /**
     * The number of calendars that render on desktop devices.
     */
    calendars?: number;
    /**
     * A string of all className you want applied to the component.
     */
    className?: string;
    /**
     * Toggle visibility or set the content of the cleaner button.
     */
    cleaner?: boolean;
    /**
     * Toggle visibility or set the content of the input indicator.
     */
    indicator?: ReactNode | boolean;
    /**
     * Toggle the readonly state for the component.
     */
    inputReadOnly?: boolean;
    /**
     * Specifies short hints that are visible in start date and end date inputs.
     */
    placeholder?: string | string[];
    /**
     * @ignore
     */
    range?: boolean;
    /**
     * Predefined date ranges the user can select from.
     */
    ranges?: object;
    /**
     * Sets the color context of the cancel button to one of CoreUIâ€™s themed colors.
     *
     * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string
     */
    rangesButtonsColor?: Colors;
    /**
     * Size the ranges button small or large.
     */
    rangesButtonsSize?: 'sm' | 'lg';
    /**
     * Set the ranges button variant to an outlined button or a ghost button.
     */
    rangesButtonsVariant?: 'outline' | 'ghost';
    /**
     * Default icon or character character that separates two dates.
     */
    separator?: ReactNode | boolean;
    /**
     * Size the component small or large.
     */
    size?: 'sm' | 'lg';
    /**
     * Provide an additional time selection by adding select boxes to choose times.
     */
    timepicker?: boolean;
}
export declare const CDateRangePicker: React.ForwardRefExoticComponent<CDateRangePickerProps & React.RefAttributes<HTMLDivElement | HTMLLIElement>>;
