{"version":3,"file":"static/js/5807.a2d318a6.chunk.js","mappings":"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","sources":["utils/HandlerCommonFile.js","validateSchema/Schema.js","views/Profile/Profile.js"],"sourcesContent":["export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CForm,\n  CFormInput,\n  CImage,\n  CRow,\n} from \"@coreui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getProfile, updateProfile } from \"src/features/profile/ProfileSlice\";\nimport { useFormik } from \"formik\";\nimport Spinner from \"src/spinner/Spinner\";\nimport PhoneInput from \"react-phone-number-input\";\nimport { ProfileSchema } from \"src/validateSchema/Schema\";\nimport { toast } from \"react-toastify\";\nimport { isValidPhoneNumber } from \"react-phone-number-input\";\nimport { isPossiblePhoneNumber } from \"react-phone-number-input\";\n\nconst Profile = () => {\n  const { profileList, isLoader } = useSelector((state) => state.profile);\n  const [logoImage, setLogoImage] = useState();\n  const [mobileNumber, setMobileNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getProfile());\n  }, []);\n\n  const {\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    touched,\n    errors,\n    setFieldValue,\n  } = useFormik({\n    initialValues: {\n      profileImage: profileList?.profileImage ? profileList?.profileImage : \"\",\n      first_name: profileList?.data?.first_name\n        ? profileList?.data?.first_name\n        : \"\",\n      last_name: profileList?.data?.last_name\n        ? profileList?.data?.last_name\n        : \"\",\n      mobile:\n        profileList?.data && profileList?.data?.mobile\n          ? profileList?.data?.mobile\n          : \"\",\n      company_address: profileList?.data?.company_address\n        ? profileList?.data?.company_address\n        : \"\",\n      company_name: profileList?.data?.company_name\n        ? profileList?.data?.company_name\n        : \"\",\n      short_code: profileList?.data?.short_code\n        ? profileList?.data?.short_code\n        : \"\",\n      country: profileList?.data?.country ? profileList?.data?.country : \"\",\n    },\n    enableReinitialize: true,\n    validationSchema: ProfileSchema,\n    onSubmit: (data) => {\n      console.log(data)\n      dispatch(updateProfile({ data, id: profileList?.data?.userId }));\n    },\n  });\n\n  // const handlerMobile = () => {\n  //   if (mobileNumber === undefined) {\n  //     toast.error(\"Please enter a valid mobile number\");\n  //   }\n  // };\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        {isLoader ? (\n          <Spinner color=\"primary\" className=\"modal-spinner\" />\n        ) : null}\n        <CCardBody>\n          <CForm onSubmit={handleSubmit}>\n            <CRow>\n              <CCol md={12}>\n                <label>\n                  Upload Profile<span className=\"text-danger\">*</span>\n                </label>\n                <CCol md={6} className=\"d-flex align-items-end mb-2\">\n                  {profileList?.data && (\n                    <CImage\n                      src={\n                        logoImage\n                          ? logoImage\n                          : `https://delivery-app.softprodigyphp.in/upload/${profileList?.data?.thumbnail}`\n                      }\n                      alt=\"Logo\"\n                      width={150}\n                      height={100}\n                      className=\"profile-upload\"\n                    />\n                  )}\n                  <CFormInput\n                    type=\"file\"\n                    className=\"w-50 ms-4 \"\n                    name=\"profileImage\"\n                    accept=\".png, .jpg, .jpeg\"\n                    onBlur={handleBlur}\n                    // value={values.profileImage}\n                    onChange={(e) => {\n                      setLogoImage(URL.createObjectURL(e.target.files[0]));\n                      setFieldValue(\"profileImage\", e.currentTarget.files[0]);\n                    }}\n                  />\n                </CCol>\n                <div className=\"error-container\">\n                  {touched.profileImage && errors.profileImage ? (\n                    <span className=\"validtion-error\">\n                      {errors.profileImage}\n                    </span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"\">\n                  Short Code <span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  value={values.short_code || \"\"}\n                  name=\"short_code\"\n                  maxLength={6}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.short_code && errors.short_code ? (\n                    <span className=\"validtion-error\">{errors.short_code}</span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"mb-2\">\n                  First Name<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  value={values.first_name}\n                  name=\"first_name\"\n                  maxLength={30}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.first_name && errors.first_name ? (\n                    <span className=\"validtion-error\">{errors.first_name}</span>\n                  ) : null}\n                </div>\n              </CCol>{\" \"}\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"mb-2\">\n                  Last Name<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  value={values.last_name}\n                  name=\"last_name\"\n                  maxLength={30}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.last_name && errors.last_name ? (\n                    <span className=\"validtion-error\">{errors.last_name}</span>\n                  ) : null}\n                </div>\n              </CCol>{\" \"}\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"mb-2\">\n                  Email<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  value={profileList?.data?.email || \"\"}\n                  readOnly\n                />\n              </CCol>\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"mb-2\">\n                  Contact Number<span className=\"text-danger\">*</span>\n                </label>\n                <PhoneInput\n                  international\n                  defaultCountry=\"IN\"\n                  id=\"validationServer03\"\n                  name=\"mobile\"\n                  value={values.mobile || \"\"}\n                  onChange={(e) => {\n                    setFieldValue(\"mobile\", e);\n                    setMobileNumber(e);\n                  }}\n\n                  // onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  <span className=\"validtion-error\">\n                    {values.mobile\n                      ? isValidPhoneNumber(values.mobile)\n                        ? undefined\n                        : \"Invalid phone number\"\n                      : \"Phone number required\"}\n                  </span>\n                </div>\n                {/* <div className=\"error-container\">\n                  {touched.mobile && errors.mobile ? (\n                    <span className=\"validtion-error\">{errors.mobile}</span>\n                  ) : null}\n                </div> */}\n              </CCol>{\" \"}\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"mb-2\">\n                  Company Address<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  value={values.company_address || \"\"}\n                  name=\"company_address\"\n                  maxLength={100}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.company_address && errors.company_address ? (\n                    <span className=\"validtion-error\">\n                      {errors.company_address}\n                    </span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"mb-2\">\n                  Company Name<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  value={values.company_name || \"\"}\n                  name=\"company_name\"\n                  maxLength={100}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.company_name && errors.company_name ? (\n                    <span className=\"validtion-error\">\n                      {errors.company_name}\n                    </span>\n                  ) : null}\n                </div>\n              </CCol>{\" \"}\n              <CCol md={4} className=\"mt-2\">\n                <label className=\"mb-2\">\n                  Country<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  value={values.country || \"\"}\n                  name=\"country\"\n                  maxLength={20}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.country && errors.country ? (\n                    <span className=\"validtion-error\">{errors.country}</span>\n                  ) : null}\n                </div>\n              </CCol>\n            </CRow>\n            <CCol md={12} className=\"d-flex justify-content-center mt-4\">\n              <CButton\n                type=\"submit\"\n                color=\"info\"\n                className=\"text-white w-25\"\n                // onClick={handlerMobile}\n              >\n                Update\n              </CButton>\n            </CCol>\n          </CForm>\n        </CCardBody>\n      </CCard>\n    </>\n  );\n};\n\nexport default Profile;\n"],"names":["FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","AgentAddSchema","Yup","teamId","required","type","first_name","trim","matches","last_name","email","mobile","min","max","website","dob","plate_number","vehicle_type","delivery_area","AutoAlloactionSchema","maxRadius","AddGeoFenceSchema","geofencing_name","location","teamName","coordinates","AddManagerSchema","status","AddPricingRuleSchema","name","geoFenceId","nullable","agentVehicle","basePrice","test","value","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddTeamSchema","team_name","team_tag","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","includes","AddMerchantSchema","pincode","address","state","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","size","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate","useSelector","profile","profileList","isLoader","useState","logoImage","setLogoImage","setMobileNumber","dispatch","useDispatch","useEffect","getProfile","useFormik","initialValues","data","enableReinitialize","validationSchema","onSubmit","console","log","updateProfile","id","userId","values","handleBlur","handleChange","handleSubmit","touched","errors","setFieldValue","className","color","md","src","thumbnail","alt","width","height","accept","onBlur","onChange","e","URL","createObjectURL","target","files","currentTarget","maxLength","readOnly","international","defaultCountry","isValidPhoneNumber","undefined"],"sourceRoot":""}