{"version":3,"file":"static/js/6779.62aa846f.chunk.js","mappings":"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","sources":["dispatcherPanel/views/autoAllocation/AutoAllocation.js","utils/HandlerCommonFile.js","validateSchema/Schema.js"],"sourcesContent":["import {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardText,\n  CCol,\n  CContainer,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CImage,\n  CRow,\n} from \"@coreui/react\";\nimport { Switch } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport oneByone from \"../../../assets/images/onebyone.png\";\nimport sendToAll from \"../../../assets/images/sentToAll.png\";\nimport batchWise from \"../../../assets/images/batchWise.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAutoAllocation,\n  showAutoSetting,\n  updateAutoAllocation,\n} from \"src/features/autoAllocation/AutoAllocation\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { AutoAlloactionSchema } from \"src/validateSchema/Schema\";\nconst AutoAllocation = () => {\n  const { autoAllocation, autoSetting, isLoader } = useSelector(\n    (state) => state.autoAll\n  );\n\n  const [status, setStatus] = useState(false);\n  const [autoAlgo, setAutoAlogo] = useState();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAutoAllocation());\n    dispatch(showAutoSetting());\n  }, []);\n\n  const cardDesAndImage = [\n    {\n      desc: \"Allocation will done one by one\",\n      img: oneByone,\n    },\n    {\n      desc: \"Allocation request will send to all\",\n      img: sendToAll,\n    },\n    {\n      desc: \"Allocation request will done in round robin format\",\n      img: oneByone,\n    },\n    {\n      desc: \"Allocation request will done batch wise\",\n      img: batchWise,\n    },\n  ];\n\n  const {\n    values,\n    handleBlur,\n    handleChange,\n    touched,\n    errors,\n    handleSubmit,\n    setFieldValue,\n  } = useFormik({\n    initialValues: {\n      maxRadius: autoSetting?.theautoSetting?.max_radius\n        ? autoSetting?.theautoSetting?.max_radius\n        : \"\",\n      autoAllocationType: autoSetting?.theautoSetting?.auto_allocation_type_id\n        ? autoSetting?.theautoSetting?.auto_allocation_type_id\n        : \"\",\n    },\n    enableReinitialize: true,\n    validationSchema: AutoAlloactionSchema,\n    onSubmit: (data) => {\n      dispatch(updateAutoAllocation(data));\n    },\n  });\n  const previousId = autoSetting?.theautoSetting?.auto_allocation_type_id;\n\n  const [selectedId, setSelectedId] = useState();\n  const handleButtonClick = (id) => {\n    setSelectedId(id);\n    setAutoAlogo(id);\n  };\n  useEffect(() => {\n    setSelectedId(previousId);\n  }, [previousId]);\n  return (\n    <CCard className=\"mb-4\">\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CCardBody>\n        <CContainer>\n          <Switch checked={status} onClick={() => setStatus(!status)} />\n          Enable this option to automatically assign Task to your agent.\n        </CContainer>\n        <CForm onSubmit={handleSubmit}>\n          <CContainer className=\"mt-2 mb-2\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Maximum Radius (Maximum 5 Km)<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              className=\"w-25\"\n              type=\"number\"\n              name=\"maxRadius\"\n              value={values.maxRadius}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              disabled={!status}\n              min={1}\n              max={5}\n              title=\"Raduis must be less 5 km\"\n            />\n            <div className=\"error-container\">\n              {touched.maxRadius && touched.maxRadius ? (\n                <span className=\"validtion-error\">{errors.maxRadius}</span>\n              ) : null}\n            </div>\n          </CContainer>\n          <CContainer>\n            <CCardText className=\"text-black fs-6\">\n              Select a Method to allocate task\n            </CCardText>\n            <div className=\"error-container\">\n              {touched.autoAllocationType && touched.autoAllocationType ? (\n                <span className=\"validtion-error\">\n                  {errors.autoAllocationType}\n                </span>\n              ) : null}\n            </div>\n            <CRow>\n              {autoAllocation?.theAutoAllocation?.map((auto, index) => {\n                return (\n                  <CCol md={6} key={index}>\n                    <CCard className=\"p-3 mt-2 mb-4 autolocation-card\">\n                      <CRow>\n                        <CCol>\n                          <CFormCheck\n                            type=\"radio\"\n                            label={`${auto.type_allocation_name}`}\n                            id={auto.id}\n                            name=\"radioButtons\"\n                            value={auto.id}\n                            checked={selectedId === auto.id}\n                            onChange={(e) => handleButtonClick(e.target.value)}\n                            disabled={!status}\n                          />\n                          <CCardText>{cardDesAndImage[index].desc}</CCardText>\n                        </CCol>\n                        <CCol className=\"d-flex justify-content-end\">\n                          <CImage\n                            src={cardDesAndImage[index].img}\n                            width=\"120px\"\n                            height=\"80px\"\n                          />\n                        </CCol>\n                      </CRow>\n                    </CCard>\n                  </CCol>\n                );\n              })}\n\n              <CCol md={4}>\n                <CButton\n                  type=\"submit\"\n                  color=\"info\"\n                  className=\"w-50 text-white\"\n                  onClick={() => {\n                    setFieldValue(\"autoAllocationType\", autoAlgo);\n                  }}\n                >\n                  Update\n                </CButton>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </CForm>\n      </CCardBody>\n    </CCard>\n  );\n};\n\nexport default AutoAllocation;\n","export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n"],"names":["useSelector","state","autoAll","autoAllocation","autoSetting","isLoader","useState","status","setStatus","autoAlgo","setAutoAlogo","dispatch","useDispatch","useEffect","getAutoAllocation","showAutoSetting","cardDesAndImage","desc","img","oneByone","batchWise","useFormik","initialValues","maxRadius","theautoSetting","max_radius","autoAllocationType","auto_allocation_type_id","enableReinitialize","validationSchema","AutoAlloactionSchema","onSubmit","data","updateAutoAllocation","values","handleBlur","handleChange","touched","errors","handleSubmit","setFieldValue","previousId","selectedId","setSelectedId","className","Spinner","color","Switch","checked","onClick","htmlFor","type","name","value","onChange","onBlur","disabled","min","max","title","theAutoAllocation","map","auto","index","md","label","type_allocation_name","id","e","target","src","width","height","FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","AgentAddSchema","Yup","teamId","required","first_name","trim","matches","last_name","email","mobile","website","dob","plate_number","vehicle_type","delivery_area","AddGeoFenceSchema","geofencing_name","location","teamName","coordinates","AddManagerSchema","AddPricingRuleSchema","geoFenceId","nullable","agentVehicle","basePrice","test","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddTeamSchema","team_name","team_tag","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","includes","AddMerchantSchema","pincode","address","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","size","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate"],"sourceRoot":""}