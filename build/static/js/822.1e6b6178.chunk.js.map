{"version":3,"file":"static/js/822.1e6b6178.chunk.js","mappings":"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","sources":["dispatcherPanel/views/agent/agent/Blocked.js","views/ReactTable/ReactTable.js"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { CCard, CContainer } from \"@coreui/react\";\nimport { BiBlock } from \"react-icons/bi\";\nimport ReactTable from \"src/views/ReactTable/ReactTable\";\nimport { FaTrash } from \"react-icons/fa\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAgents,\n  getChangeState,\n  openConfirmationModal,\n  setCurrentAgentPage,\n  setCurrentSTs,\n  setDeleteId,\n} from \"src/features/agents/AgentSlice\";\nconst Blocked = () => {\n  const agent = useSelector((state) => state.agent.agentList);\n\n  const dispacth = useDispatch();\n  useEffect(() => {\n    dispacth(getAgents(\"isBlocked=1\"));\n    dispacth(setCurrentSTs(\"isBlocked=1\"));\n    dispacth(setCurrentAgentPage(\"blocked\"));\n  }, []);\n  const handleUnBlock = (id) => {\n    dispacth(\n      getChangeState({\n        status: \"unblockAgents\",\n        id,\n        currentStatus: \"isBlocked=1\",\n      })\n    );\n  };\n  const handleDelete = (id) => {\n    dispacth(setDeleteId(id));\n    dispacth(openConfirmationModal());\n  };\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Name\",\n        accessor: (d) => {\n          return (\n            <span>\n              {d.user.first_name} {d.user.last_name}\n            </span>\n          );\n        },\n      },\n      {\n        Header: \"Type\",\n        accessor: (d) => {\n          return <span>{d.type == null ? \"--\" : d.type}</span>;\n        },\n      },\n      {\n        Header: \"Team Name\",\n        accessor: (d) => {\n          return <span>{d.teamName == null ? \"--\" : d.teamName}</span>;\n        },\n      },\n      {\n        Header: \"Cash Collected\",\n        accessor: \"cash_collected\",\n      },\n      {\n        Header: \"Order Earning\",\n        accessor: \"walletBalance\",\n      },\n      {\n        Header: \"Action\",\n        disableSortBy: true,\n        accessor: (d) => {\n          return (\n            <CContainer className=\"d-flex justify-content-start align-items-center ps-0 gap-2\">\n              <FaTrash\n                className=\"cursor\"\n                title=\"Delete Agent\"\n                onClick={() => handleDelete(d.user.id)}\n              />\n              <BiBlock\n                title=\"Unblock\"\n                className=\"fs-5 text-success cursor\"\n                onClick={() => handleUnBlock(d.user.id)}\n              />\n            </CContainer>\n          );\n        },\n      },\n    ],\n    []\n  );\n  return (\n    <CCard>\n      <ReactTable data={agent?.agents || []} columns={columns} />\n    </CCard>\n  );\n};\n\nexport default Blocked;\n","import React, { useEffect } from \"react\";\nimport {\n  useSortBy,\n  useTable,\n  usePagination,\n  useGlobalFilter,\n} from \"react-table\";\nimport { BsArrowDown, BsArrowUp } from \"react-icons/bs\";\nimport { useSelector } from \"react-redux\";\n\nconst ReactTable = ({ data, columns }) => {\n  const {searchField} = useSelector((state)=>state.users)\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: false,\n      initialState: { pageIndex: 0, pageSize: 10 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    state,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    pageCount,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  useEffect(()=>{\n    gotoPage(0)\n  },[searchField])\n\n  useEffect(()=>{\n    if(data?.length % 10 ===0){\n      previousPage()\n    }\n  },[data])\n\n  useEffect(() => {\n    window.scrollTo({top: 0, left: 0, behavior: 'instant'});\n  }, [pageIndex]);\n  \n  return (\n    <>\n      <div>\n        <table {...getTableProps()} className=\"category-table\">\n          <thead className=\"category-table-head\">\n            {headerGroups.map((headerGroups, index) => (\n              <tr {...headerGroups.getHeaderGroupProps()} key={index}>\n                {headerGroups.headers.map((columns,index) => (\n                  <th key={index}>\n                    {columns.render(\"Header\")}\n                    <span {...columns.getHeaderProps(columns.getSortByToggleProps())}>\n                    {!columns.disableSortBy &&\n                      (columns.isSorted ? (\n                        columns.isSortedDesc ? (\n                          <>\n                          <BsArrowDown className=\"arrow-down\" />\n                          <BsArrowUp />\n                          </>\n                        ) : (\n                          <>\n                          <BsArrowDown />\n                          <BsArrowUp className=\"arrow-down\" />\n                          </>\n                        )\n                      ) : (\n                        <>\n                          <BsArrowUp />\n                          <BsArrowDown />\n                        </>\n                      ))}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"category-table-body\">\n            {data.length !== 0 ? (\n              page.map((row,index) => {\n                prepareRow(row);\n                return (\n                  <tr className=\"th-table\" {...row.getRowProps()} key={index}>\n                    {row.cells.map((cell, index) => {\n                      return (\n                        <th className=\"th-table-data\" {...cell.getCellProps()} key={index}>{cell.render(\"Cell\")}</th>\n                      );\n                    })}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan={columns.length}> No record found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {data?.length > 10 ? (\n        <div className=\"pagination-button\">\n          <button onClick={() => gotoPage(0)} disabled={pageIndex === 0}>\n          {'<<'}\n        </button>{' '}\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n           {'<'}\n          </button>\n          <strong className=\"me-2\">\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{\" \"}\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\n            {'>'}\n          </button>\n          <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={pageIndex === pageCount - 1}\n        >\n          {'>>'}\n        </button>{' '}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default ReactTable;\n"],"names":["agent","useSelector","state","agentList","dispacth","useDispatch","useEffect","getAgents","setCurrentSTs","setCurrentAgentPage","columns","useMemo","Header","accessor","d","user","first_name","last_name","type","teamName","disableSortBy","className","title","onClick","id","setDeleteId","openConfirmationModal","getChangeState","status","currentStatus","data","agents","users","searchField","tableInstance","useTable","autoResetPage","initialState","pageIndex","pageSize","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","pageCount","length","window","scrollTo","top","left","behavior","map","index","getHeaderGroupProps","key","headers","render","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","colSpan","disabled"],"sourceRoot":""}