{"version":3,"file":"static/js/9527.fd7b66fd.chunk.js","mappings":"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","sources":["views/Merchants/Active.js","views/ReactTable/ReactTable.js"],"sourcesContent":["import {\n  CCard,\n  CContainer,\n} from \"@coreui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaTrash } from \"react-icons/fa\";\nimport {\n  blockMerchant,\n  getMerchant,\n  setCurrentStatus,\n  openConfirmModal,\n  merchantDeleteId,\n  setCurrentMerchantPage,\n} from \"src/features/Merchants/merchantSlice\";\nimport { useEffect } from \"react\";\nimport { useMemo } from \"react\";\nimport ReactTable from \"../ReactTable/ReactTable\";\nimport {CgUnblock} from 'react-icons/cg'\nconst Active = () => {\n  const { merchant, searchInput } = useSelector(\n    (state) => state.merchants\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMerchant({ status: \"isActive=1\", searchInput }));\n    dispatch(setCurrentStatus({ status: \"isActive=1\" }));\n    dispatch(setCurrentMerchantPage(\"active\"))\n  }, [searchInput]);\n\n  const handleBlock = (id) => {\n    dispatch(blockMerchant({ id, status: \"isActive=1\" }));\n  };\n  const handleDelete = (id) => {\n    dispatch(setCurrentStatus(\"isActive=1\"));\n    dispatch(merchantDeleteId(id));\n    dispatch(openConfirmModal());\n  };\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Merchant Name\",\n        accessor: (d) => {\n          return (\n            <span>\n              {d?.user?.first_name} {d?.user?.last_name}\n            </span>\n          );\n        },\n      },\n      {\n        Header: \"Mobile\",\n        accessor: \"user.mobile\",\n      },\n      {\n        Header: \"Email\",\n        accessor: \"user.email\",\n      },\n      {\n        Header: \"Address\",\n        accessor: \"address\",\n      },\n      {\n        Header: \"State\",\n        accessor: \"state\",\n      },\n      {\n        Header: \"District\",\n        accessor: \"district\",\n      },\n      {\n        Header: \"Pincode\",\n        accessor: \"pincode\",\n      },\n      {\n        Header: \"Action\",\n        disableSortBy: true,\n        accessor: (d) => {\n          return (\n            <CContainer className=\"d-flex justify-content-start align-items-center ps-0 gap-2\">\n              <FaTrash\n                className=\"cursor\"\n                title=\"Delete Merchant\"\n                onClick={() => handleDelete(d.userId)}\n              />\n              <CgUnblock\n                title=\"Block\"\n                className=\"fs-5 text-danger cursor\"\n                onClick={() => handleBlock(d.userId)}\n              />\n            </CContainer>\n          );\n        },\n      },\n    ],\n    []\n  );\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        {true && (\n          <ReactTable data={merchant?.merchants || []} columns={columns} />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Active;\n","import React, { useEffect } from \"react\";\nimport {\n  useSortBy,\n  useTable,\n  usePagination,\n  useGlobalFilter,\n} from \"react-table\";\nimport { BsArrowDown, BsArrowUp } from \"react-icons/bs\";\nimport { useSelector } from \"react-redux\";\n\nconst ReactTable = ({ data, columns }) => {\n  const {searchField} = useSelector((state)=>state.users)\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: false,\n      initialState: { pageIndex: 0, pageSize: 10 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    state,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    pageCount,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  useEffect(()=>{\n    gotoPage(0)\n  },[searchField])\n\n  useEffect(()=>{\n    if(data?.length % 10 ===0){\n      previousPage()\n    }\n  },[data])\n\n  useEffect(() => {\n    window.scrollTo({top: 0, left: 0, behavior: 'instant'});\n  }, [pageIndex]);\n  \n  return (\n    <>\n      <div>\n        <table {...getTableProps()} className=\"category-table\">\n          <thead className=\"category-table-head\">\n            {headerGroups.map((headerGroups, index) => (\n              <tr {...headerGroups.getHeaderGroupProps()} key={index}>\n                {headerGroups.headers.map((columns,index) => (\n                  <th key={index}>\n                    {columns.render(\"Header\")}\n                    <span {...columns.getHeaderProps(columns.getSortByToggleProps())}>\n                    {!columns.disableSortBy &&\n                      (columns.isSorted ? (\n                        columns.isSortedDesc ? (\n                          <>\n                          <BsArrowDown className=\"arrow-down\" />\n                          <BsArrowUp />\n                          </>\n                        ) : (\n                          <>\n                          <BsArrowDown />\n                          <BsArrowUp className=\"arrow-down\" />\n                          </>\n                        )\n                      ) : (\n                        <>\n                          <BsArrowUp />\n                          <BsArrowDown />\n                        </>\n                      ))}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"category-table-body\">\n            {data.length !== 0 ? (\n              page.map((row,index) => {\n                prepareRow(row);\n                return (\n                  <tr className=\"th-table\" {...row.getRowProps()} key={index}>\n                    {row.cells.map((cell, index) => {\n                      return (\n                        <th className=\"th-table-data\" {...cell.getCellProps()} key={index}>{cell.render(\"Cell\")}</th>\n                      );\n                    })}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan={columns.length}> No record found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {data?.length > 10 ? (\n        <div className=\"pagination-button\">\n          <button onClick={() => gotoPage(0)} disabled={pageIndex === 0}>\n          {'<<'}\n        </button>{' '}\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n           {'<'}\n          </button>\n          <strong className=\"me-2\">\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{\" \"}\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\n            {'>'}\n          </button>\n          <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={pageIndex === pageCount - 1}\n        >\n          {'>>'}\n        </button>{' '}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default ReactTable;\n"],"names":["useSelector","state","merchants","merchant","searchInput","dispatch","useDispatch","useEffect","getMerchant","status","setCurrentStatus","setCurrentMerchantPage","columns","useMemo","Header","accessor","d","user","first_name","last_name","disableSortBy","className","title","onClick","id","userId","merchantDeleteId","openConfirmModal","blockMerchant","data","users","searchField","tableInstance","useTable","autoResetPage","initialState","pageIndex","pageSize","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","pageCount","length","window","scrollTo","top","left","behavior","map","index","getHeaderGroupProps","key","headers","render","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","colSpan","disabled"],"sourceRoot":""}