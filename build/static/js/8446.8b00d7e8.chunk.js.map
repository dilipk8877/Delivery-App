{"version":3,"file":"static/js/8446.8b00d7e8.chunk.js","mappings":"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","sources":["dispatcherPanel/views/GeoFence/Modal/UpdateGeoFence.js","dispatcherPanel/views/GeoFence/map/AutoCompleteCity.js","dispatcherPanel/views/GeoFence/map/LeafLet.js"],"sourcesContent":["import {\n  CButton,\n  CCard,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormSelect,\n  CFormTextarea,\n  CRow,\n} from \"@coreui/react\";\nimport { CCardBody } from \"@coreui/react-pro\";\nimport { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport AutuCompleteCity from \"../map/AutoCompleteCity\";\nimport * as Yup from \"yup\";\nimport {\n  getPrefieldGEoFenceById,\n  updateGeoFence,\n} from \"src/features/geoFence/GeoFenceSlice\";\nimport PolygonMap from \"../map/LeafLet\";\nimport Spinner from \"src/spinner/Spinner\";\n\nconst UpdateGeoFence = () => {\n  const { coordinates, isLoader } = useSelector((state) => state.geoFen);\n  const preFieldValue = useSelector(\n    (state) => state.geoFen.prefieldGEoFenceById\n  );\n  const [address, setAdress] = useState();\n  const dispatch = useDispatch();\n  const coordint = coordinates[0]?.latlngs;\n  const lat = preFieldValue?.theGeoFence?.coordinates?.map((ll) => ll.lat);\n  const lng = preFieldValue?.theGeoFence?.coordinates?.map((ll) => ll.lng);\n  const centerMap = {\n    lat: lat && lat[0] ? lat[0] : 30.682421,\n    lng: lng && lng[0] ? lng[0] : 76.727631,\n  };\n\n  const [center, setCenter] = useState([30.682421, 76.727631]);\n  const navigate = useNavigate();\n\n  const { id } = useParams();\n  const city = preFieldValue?.theGeoFence?.location;\n  useEffect(() => {\n    dispatch(getPrefieldGEoFenceById(id));\n    setAdress(city);\n  }, [city, id]);\n\n  const { values, handleBlur, handleChange, handleSubmit, errors, touched } =\n    useFormik({\n      initialValues: {\n        geofencing_name: preFieldValue?.theGeoFence?.geofencing_name\n          ? preFieldValue?.theGeoFence?.geofencing_name\n          : \"\",\n        location: address,\n        coordinates: coordint,\n      },\n      enableReinitialize: true,\n      onSubmit: (data, { resetForm }) => {\n        dispatch(updateGeoFence({ coordinates: coordint, id, navigate }));\n        resetForm({ data: \"\" });\n      },\n    });\n\n  return (\n    <CCard className=\"mb-4\">\n      {isLoader ? <Spinner className=\"modal-spinner\" /> : null}\n      <CCardBody>\n        <CForm onSubmit={handleSubmit}>\n          <CRow>\n            <CCol md={4}>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Select Team<span className=\"text-danger\">*</span>\n                </label>\n                <CFormSelect disabled>\n                  <option>{preFieldValue?.theGeoFence?.teamName}</option>\n                </CFormSelect>\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Location<span className=\"text-danger\">*</span>\n                </label>\n                <AutuCompleteCity\n                  setAdress={setAdress}\n                  address={address}\n                  setCenter={setCenter}\n                  value={preFieldValue?.theGeoFence?.location}\n                  disabled={preFieldValue}\n                />\n                <div className=\"error-container\">\n                  {touched.location && errors.location ? (\n                    <span className=\"validtion-error\">{errors.location}</span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  GeoFence Name<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  id=\"validationServer01\"\n                  name=\"geofencing_name\"\n                  className=\"addGeoFence-geofencing_name\"\n                  value={values.geofencing_name}\n                  onChange={handleChange}\n                  disabled={true}\n                />\n                <div className=\"error-container\">\n                  {touched.geofencing_name && errors.geofencing_name ? (\n                    <span className=\"validtion-error\">\n                      {errors.geofencing_name}\n                    </span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol\n                md={12}\n                className=\"d-flex justify-content-between mt-3 gap-5\"\n              >\n                <CButton\n                  color=\"secondary\"\n                  className=\"w-50 text-white\"\n                  onClick={() => navigate(\"/dispatcher/geoFence\")}\n                >\n                  Cancel\n                </CButton>\n                <CButton type=\"submit\" color=\"info\" className=\"w-50 text-white\">\n                  Update\n                </CButton>\n              </CCol>\n            </CCol>\n            <CCol md={8}>\n              {/* <AutoCom /> */}\n              <div className=\"mt-2\">\n                <span style={{ marginLeft: \"15px\" }}>\n                  {touched.coordinates && errors.coordinates ? (\n                    <span className=\"validtion-error\">\n                      {errors.coordinates}\n                    </span>\n                  ) : null}\n                </span>\n                <PolygonMap\n                  center={centerMap}\n                  polygonCoords={preFieldValue?.theGeoFence?.coordinates}\n                />\n              </div>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CCardBody>\n    </CCard>\n  );\n};\n\nexport default UpdateGeoFence;\n","import { CFormInput } from \"@coreui/react\";\nimport React from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  geocodeByPlaceId,\n  getLatLng,\n} from \"react-places-autocomplete\";\nconst AutuCompleteCity = ({ setAdress, address, setCenter, disabled }) => {\n\n  const handleSelect = async (value) => {\n    const results = await geocodeByAddress(value);\n    const ll = await getLatLng(results[0]);\n    setAdress(value);\n    const lat = ll?.lat;\n    const lng = ll?.lng;\n    setCenter([lat, lng]);\n  };\n  return (\n    <>\n      <PlacesAutocomplete\n        value={address}\n        onChange={setAdress}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\n          return (\n            <div>\n              <CFormInput\n                {...getInputProps({\n                  placeholder: \"Search Places ...\",\n                  className: \"location-search-input-addgeofence\",\n                })}\n                className=\"addGeoFence-geofencing_name\"\n                disabled={disabled !== undefined ? true : false}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? \"suggestion-item--active\"\n                    : \"suggestion-item\";\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          );\n        }}\n      </PlacesAutocomplete>\n    </>\n  );\n};\n\nexport default AutuCompleteCity;\n","import React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, FeatureGroup, useMap, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { useRef } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {  setCoordinates } from \"src/features/geoFence/GeoFenceSlice\";\nfunction SetViewOnClick({ center }) {\n  const map = useMap();\n  map.flyTo(center,11);\n  return null;\n}\nconst PolygonMap = ({ center,polygonCoords }) => {\n  const [mapLayers, setMapLayers] = useState([]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setCoordinates(mapLayers));\n  }, [mapLayers]);\n\n  const mapRef = useRef();\n\n  const handleCreate = (e) => {\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n      setMapLayers((layers) => [\n        ...layers,\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      ]);\n    }\n  };\n\n  const handleDelete = (e) => {\n    const {\n      layers: { _layers },\n    } = e;\n\n    Object.values(_layers).map(({ _leaflet_id }) => {\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n    });\n  };\n  return (\n    <>\n      <div className=\"col\">\n        <MapContainer\n          center={center}\n          zoom={4}\n          style={{ height: \"60vh\", width: \"100%\" }}\n          ref={mapRef}\n          attributionControl={false}\n        >\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"https://www.maptiler.com/\">MapTiler</a> &copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n\n          <FeatureGroup>\n            <EditControl\n              position=\"topright\"\n              onCreated={handleCreate}\n              onDeleted={handleDelete}\n              edit={{\n                remove: true,\n                edit: false\n              }}\n              draw={{\n                rectangle: false,\n                circle: false,\n                circlemarker: false,\n                marker: false,\n                polyline: false,\n              }}\n            />\n          </FeatureGroup>\n         <Polygon positions={polygonCoords ? polygonCoords : []} />\n          <SetViewOnClick center={center} />\n        </MapContainer>\n      </div>\n    </>\n  );\n};\n\nexport default PolygonMap;\n"],"names":["useSelector","state","geoFen","coordinates","isLoader","preFieldValue","prefieldGEoFenceById","useState","address","setAdress","dispatch","useDispatch","coordint","latlngs","lat","theGeoFence","map","ll","lng","centerMap","setCenter","navigate","useNavigate","id","useParams","city","location","useEffect","getPrefieldGEoFenceById","useFormik","initialValues","geofencing_name","enableReinitialize","onSubmit","data","resetForm","updateGeoFence","values","handleChange","handleBlur","handleSubmit","errors","touched","className","md","htmlFor","disabled","teamName","value","type","name","onChange","color","onClick","style","marginLeft","center","polygonCoords","handleSelect","geocodeByAddress","results","getLatLng","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","undefined","suggestion","active","backgroundColor","cursor","description","SetViewOnClick","useMap","flyTo","mapLayers","setMapLayers","setCoordinates","mapRef","useRef","zoom","height","width","ref","attributionControl","url","attribution","position","onCreated","e","layerType","layer","_leaflet_id","layers","getLatLngs","onDeleted","_layers","Object","filter","l","edit","remove","draw","rectangle","circle","circlemarker","marker","polyline","positions"],"sourceRoot":""}