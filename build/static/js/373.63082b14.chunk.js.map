{"version":3,"file":"static/js/373.63082b14.chunk.js","mappings":"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","sources":["dispatcherPanel/views/GeoFence/map/Polygon.js","dispatcherPanel/views/GeoFence/Modal/ConfirmationModel.js","dispatcherPanel/views/GeoFence/GeoFence.js","views/ReactTable/ReactTable.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { GoogleMap, Marker, Polygon } from \"@react-google-maps/api\";\nimport {  useSelector } from \"react-redux\";\nconst PolygonOnMap = () => {\n  const coordinateById = useSelector((state) => state.geoFen.coordinatById);\n\n  const mapContainerStyle = {\n    height: \"550px\",\n    width: \"100%\",\n  };\n  const lat = coordinateById?.theGeoFence?.coordinates?.map((ll) => ll.lat);\n  const lng = coordinateById?.theGeoFence?.coordinates?.map((ll) => ll.lng);\n  const center = {\n    lat: lat && lat[0] ? lat[0] : 30.682421,\n    lng: lng && lng[0] ? lng[0] : 76.727631,\n  };\n  const paths = coordinateById?.theGeoFence?.coordinates;\n\n  const options = {\n    fillColor: \"lightblue\",\n    fillOpacity: 0.3,\n    strokeColor: \"red\",\n    strokeOpacity: 1,\n    strokeWeight: 2,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    geodesic: false,\n  };\n\n\n  return (\n    <GoogleMap\n      id=\"marker-example\"\n      mapContainerStyle={mapContainerStyle}\n      zoom={12}\n      center={center}\n    >\n      <Polygon paths={paths} options={options} />\n    </GoogleMap>\n  );\n};\n\nexport default PolygonOnMap;\n","import {\n  CButton,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport { confirmationMesaageClose, deleteGeoFence, setDeleteId } from \"src/features/geoFence/GeoFenceSlice\";\nconst ConfirmationModel = () => {\n  const dispatch = useDispatch();\n  const { confirmationMesaage, deleteId } = useSelector((state) => state.geoFen);\n\n\n  const confirmButton = () => {\n    dispatch(deleteGeoFence(deleteId));\n    dispatch(confirmationMesaageClose());\n    location.reload() \n  };\n  const closeModal = () => {\n    dispatch(confirmationMesaageClose());\n    dispatch(setDeleteId(null));\n  };\n  return (\n    <CModal alignment=\"center\" visible={confirmationMesaage}>\n      <CHeader className=\"rounded-top\">\n        <CModalTitle></CModalTitle>\n        <ImCross className=\"text-danger cursor fs-5 me-2\" onClick={closeModal} />\n      </CHeader>\n      <CModalBody className=\"confirmCardText fs-6 w-100 d-flex justify-content-center\">\n        Do you really want to delete this record?\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={closeModal}>\n          No\n        </CButton>\n        <CButton\n          color=\"info\"\n          className=\"text-white\"\n          type=\"submit\"\n          onClick={confirmButton}\n        >\n          Yes\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default ConfirmationModel;\n","import {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CRow,\n} from \"@coreui/react\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { BsFillPlusCircleFill } from \"react-icons/bs\";\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  confirmationMesaageOpen,\n  getCoordinatesById,\n  getGeoFence,\n  setDeleteId,\n} from \"src/features/geoFence/GeoFenceSlice\";\nimport Spinner from \"src/spinner/Spinner\";\nimport ReactTable from \"src/views/ReactTable/ReactTable\";\nimport PolygonOnMap from \"./map/Polygon\";\nimport ConfirmationModel from \"./Modal/ConfirmationModel\";\nconst GeoFence = () => {\n  const {geoFence, isLoader } = useSelector((state) => state.geoFen);\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n\n  useEffect(() => {\n    dispatch(getGeoFence());\n  }, []);\n  \n  const handleDelete = (id) => {\n    dispatch(setDeleteId(id));\n    dispatch(confirmationMesaageOpen());\n  };\n  const handleEdit = (id)=>{\n    navigate(`/dispatcher/geoFence/updateGeoFence/${id}`)\n  }\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Name\",\n        accessor: (d) => {\n          return (\n            <span\n              onClick={() => dispatch(getCoordinatesById(d.id))}\n              className=\"cursor\"\n            >\n              {d.geofencing_name?.charAt(0).toUpperCase() + d.geofencing_name?.slice(1)}\n            </span>\n          );\n        },\n      },\n      {\n        Header:\"Team\",\n        accessor:\"teamName\"\n      },\n      {\n        Header: \"Action\",\n        disableSortBy: true,\n        accessor: (d) => {\n          return (\n            <CCardBody className=\"d-flex justify-content-start align-items-center ps-0 gap-2\">\n              <FaEdit\n                className=\"cursor\"\n                title=\"Update geoFence\"\n                onClick={() => handleEdit(d.id)}\n              />\n              <FaTrash className=\"cursor\" title=\"Delete geoFence\" onClick={() => handleDelete(d.id)} />\n            </CCardBody>\n          );\n        },\n      },\n    ],\n    []\n  );\n  const handleNavigate = () => {\n    navigate(\"/dispatcher/geoFence/addGeoFence\");\n  };\n  return (\n    <>\n       <CCard className=\"mb-4\">\n      {isLoader ? <Spinner className=\"modal-spinner\" /> : null}\n          <CCardBody>\n            <CRow>\n              <CCol md={4}>\n                <CContainer className=\"d-flex justify-content-start gap-3 mb-4\">\n                  <CButton\n                    color=\"info\"\n                    className=\"button-size text-white d-flex justify-content-center align-items-center\"\n                    onClick={handleNavigate}\n                  >\n                    <BsFillPlusCircleFill className=\"me-1 button-icon\" />\n                    Add\n                  </CButton>\n                </CContainer>\n\n                <CCard>\n                  {true && (\n                    <ReactTable\n                      data={geoFence?.GeoFence_Details || []}\n                      columns={columns}\n                    />\n                  )}\n                </CCard>\n              </CCol>\n              <CCol md={8}>\n                <PolygonOnMap />\n              </CCol>\n            </CRow>\n          </CCardBody>\n          <ConfirmationModel />\n        </CCard>\n    </>\n  );\n};\n\nexport default GeoFence;\n","import React, { useEffect } from \"react\";\nimport {\n  useSortBy,\n  useTable,\n  usePagination,\n  useGlobalFilter,\n} from \"react-table\";\nimport { BsArrowDown, BsArrowUp } from \"react-icons/bs\";\nimport { useSelector } from \"react-redux\";\n\nconst ReactTable = ({ data, columns }) => {\n  const {searchField} = useSelector((state)=>state.users)\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: false,\n      initialState: { pageIndex: 0, pageSize: 10 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    state,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    pageCount,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  useEffect(()=>{\n    gotoPage(0)\n  },[searchField])\n\n  useEffect(()=>{\n    if(data?.length % 10 ===0){\n      previousPage()\n    }\n  },[data])\n\n  useEffect(() => {\n    window.scrollTo({top: 0, left: 0, behavior: 'instant'});\n  }, [pageIndex]);\n  \n  return (\n    <>\n      <div>\n        <table {...getTableProps()} className=\"category-table\">\n          <thead className=\"category-table-head\">\n            {headerGroups.map((headerGroups, index) => (\n              <tr {...headerGroups.getHeaderGroupProps()} key={index}>\n                {headerGroups.headers.map((columns,index) => (\n                  <th key={index}>\n                    {columns.render(\"Header\")}\n                    <span {...columns.getHeaderProps(columns.getSortByToggleProps())}>\n                    {!columns.disableSortBy &&\n                      (columns.isSorted ? (\n                        columns.isSortedDesc ? (\n                          <>\n                          <BsArrowDown className=\"arrow-down\" />\n                          <BsArrowUp />\n                          </>\n                        ) : (\n                          <>\n                          <BsArrowDown />\n                          <BsArrowUp className=\"arrow-down\" />\n                          </>\n                        )\n                      ) : (\n                        <>\n                          <BsArrowUp />\n                          <BsArrowDown />\n                        </>\n                      ))}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"category-table-body\">\n            {data.length !== 0 ? (\n              page.map((row,index) => {\n                prepareRow(row);\n                return (\n                  <tr className=\"th-table\" {...row.getRowProps()} key={index}>\n                    {row.cells.map((cell, index) => {\n                      return (\n                        <th className=\"th-table-data\" {...cell.getCellProps()} key={index}>{cell.render(\"Cell\")}</th>\n                      );\n                    })}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan={columns.length}> No record found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {data?.length > 10 ? (\n        <div className=\"pagination-button\">\n          <button onClick={() => gotoPage(0)} disabled={pageIndex === 0}>\n          {'<<'}\n        </button>{' '}\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n           {'<'}\n          </button>\n          <strong className=\"me-2\">\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{\" \"}\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\n            {'>'}\n          </button>\n          <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={pageIndex === pageCount - 1}\n        >\n          {'>>'}\n        </button>{' '}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default ReactTable;\n"],"names":["coordinateById","useSelector","state","geoFen","coordinatById","lat","theGeoFence","coordinates","map","ll","lng","center","paths","id","mapContainerStyle","height","width","zoom","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","clickable","draggable","editable","geodesic","dispatch","useDispatch","confirmationMesaage","deleteId","closeModal","confirmationMesaageClose","setDeleteId","alignment","visible","className","onClick","color","type","deleteGeoFence","location","reload","geoFence","isLoader","navigate","useNavigate","useEffect","getGeoFence","columns","useMemo","Header","accessor","d","getCoordinatesById","geofencing_name","charAt","toUpperCase","slice","disableSortBy","title","confirmationMesaageOpen","Spinner","md","ReactTable","data","GeoFence_Details","Polygon","users","searchField","tableInstance","useTable","autoResetPage","initialState","pageIndex","pageSize","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","pageCount","length","window","scrollTo","top","left","behavior","index","getHeaderGroupProps","key","headers","render","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","colSpan","disabled"],"sourceRoot":""}