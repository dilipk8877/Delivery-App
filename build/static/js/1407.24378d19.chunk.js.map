{"version":3,"file":"static/js/1407.24378d19.chunk.js","mappings":"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","sources":["dispatcherPanel/views/teams/modal/Add.js","dispatcherPanel/views/teams/modal/ConfirmationModel.js","dispatcherPanel/views/teams/Teams.js","utils/HandlerCommonFile.js","validateSchema/Schema.js","views/ReactTable/ReactTable.js"],"sourcesContent":["import {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport * as Yup from \"yup\";\nimport {\n  addTeams,\n  closeAddModal,\n  setSubmit,\n  setTeamUpdatePreValue,\n  setUpdate,\n  toggleTeamModalTrue,\n  updateTeam,\n} from \"src/features/teams/TeamSlice\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { AddTeamSchema } from \"src/validateSchema/Schema\";\nconst Add = () => {\n  const {\n    addModal,\n    toggleTeamModal,\n    teamUpdatePreValue,\n    submitStatus,\n    isLoader,\n  } = useSelector((state) => state.team);\n  const dispatch = useDispatch();\n\n  const {\n    values,\n    handleChange,\n    handleSubmit,\n    errors,\n    touched,\n    handleBlur,\n    setFieldValue,\n    resetForm,\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      team_name:\n        teamUpdatePreValue && teamUpdatePreValue?.team_name\n          ? teamUpdatePreValue?.team_name\n          : \"\",\n      team_tag:\n        teamUpdatePreValue && teamUpdatePreValue?.team_tag\n          ? teamUpdatePreValue?.team_tag\n          : \"\",\n    },\n    validationSchema: AddTeamSchema,\n    onSubmit: (data, action) => {\n      if (submitStatus === \"submit\") {\n        dispatch(addTeams({ data, action }));\n      } else if (submitStatus === \"update\") {\n        dispatch(updateTeam({ data, id: teamUpdatePreValue.id, action }));\n        dispatch(toggleTeamModalTrue());\n        dispatch(setTeamUpdatePreValue(\" \"));\n      }\n    },\n  });\n\n  const handlCloseModel = () => {\n    dispatch(closeAddModal());\n    dispatch(toggleTeamModalTrue());\n    dispatch(setTeamUpdatePreValue(\" \"));\n    resetForm();\n  };\n  return (\n    <CModal alignment=\"center\" size=\"lg\" visible={addModal}>\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CHeader className=\"rounded-top\">\n        <CModalTitle className=\"\">Add Teams</CModalTitle>\n        <ImCross\n          onClick={handlCloseModel}\n          className=\"text-danger cursor fs-5 me-2\"\n        />\n      </CHeader>\n      <CModalBody>\n        <CForm className=\" g-3 \" onSubmit={handleSubmit}>\n          <CRow className=\"\">\n            <CCol md={6} className=\"position-relative\">\n              <label className=\"\" htmlFor=\"validationServer01\">\n                Team Name<span className=\"text-danger\">*</span>\n              </label>\n              <CFormInput\n                type=\"text\"\n                id=\"validationServer01\"\n                name=\"team_name\"\n                value={values.team_name}\n                maxLength={40}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              <div className=\"error-container\">\n                {touched.team_name && errors.team_name ? (\n                  <span className=\"validtion-error\">{errors.team_name}</span>\n                ) : null}\n              </div>\n            </CCol>\n            <CCol md={6} className=\"position-relative\">\n              <label className=\"\" htmlFor=\"validationServer02\">\n                Team tag<span className=\"text-danger\">*</span>\n              </label>\n              <CFormInput\n                type=\"text\"\n                id=\"validationServer02\"\n                name=\"team_tag\"\n                maxLength={20}\n                value={values.team_tag}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              <div className=\"error-container\">\n                {touched.team_tag && errors.team_tag ? (\n                  <span className=\"validtion-error\">{errors.team_tag}</span>\n                ) : null}\n              </div>\n            </CCol>\n          </CRow>\n          <CCol sm={12} className=\"d-flex justify-content-center mt-4\">\n            {toggleTeamModal ? (\n              <CButton\n                type=\"submit\"\n                color=\"info\"\n                className=\"w-25 text-light\"\n                onClick={() => dispatch(setSubmit())}\n              >\n                Submit\n              </CButton>\n            ) : (\n              <CButton\n                type=\"submit\"\n                color=\"info\"\n                className=\"w-25 text-light\"\n                onClick={() => dispatch(setUpdate())}\n              >\n                Update\n              </CButton>\n            )}\n          </CCol>\n        </CForm>\n      </CModalBody>\n    </CModal>\n  );\n};\n\nexport default Add;\n","import {\n  CButton,\n  CCardBody,\n  CCardFooter,\n  CCardText,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport { closeConfirmMessage, deleteTeams, teamDeleteId } from \"src/features/teams/TeamSlice\";\nconst ConfirmationModel = () => {\n  const dispatch = useDispatch();\n  const { confirmMessage, deleteId } = useSelector((state) => state.team);\n\n\n  const confirmButton = () => {\n    dispatch(deleteTeams(deleteId));\n    dispatch(closeConfirmMessage());\n  };\n  const closeModal = () => {\n    dispatch(closeConfirmMessage());\n    dispatch(teamDeleteId(null));\n  };\n  return (\n    <CModal alignment=\"center\" visible={confirmMessage}>\n      <CHeader className=\"rounded-top\">\n        <CModalTitle></CModalTitle>\n        <ImCross className=\"text-danger cursor fs-5 me-2\" onClick={closeModal} />\n      </CHeader>\n      <CModalBody className=\"confirmCardText fs-6 w-100 d-flex justify-content-center\">\n        Do you really want to delete this record?\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={closeModal}>\n          No\n        </CButton>\n        <CButton\n          color=\"info\"\n          className=\"text-white\"\n          type=\"submit\"\n          onClick={confirmButton}\n        >\n          Yes\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default ConfirmationModel;\n","import { CButton, CCard, CCardBody, CContainer } from \"@coreui/react\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { BsFillPlusCircleFill } from \"react-icons/bs\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getTeams, openAddModal, openConfirmMessage, setTeamUpdatePreValue, teamDeleteId, toggleTeamModalFalse } from \"src/features/teams/TeamSlice\";\nimport ReactTable from \"src/views/ReactTable/ReactTable\";\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport Add from \"./modal/Add\";\nimport ConfirmationModel from \"./modal/ConfirmationModel\";\nimport Spinner from \"src/spinner/Spinner\";\n\nconst Teams = () => {\nconst {teamsList, isLoader} = useSelector((state)=>state.team)\nconst dispatch = useDispatch()\nuseEffect(()=>{\n  dispatch(getTeams())\n},[])\n\nconst handleOpneMadal =()=>{\n  dispatch(openAddModal())\n}\n\nconst handleDelete = (id)=>{\n  dispatch(teamDeleteId(id))\n  dispatch(openConfirmMessage())\n}\n\nconst handleEdit = (user) =>{\n  dispatch(openAddModal())\n  dispatch(toggleTeamModalFalse())\n  dispatch(setTeamUpdatePreValue(user))\n}\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Team Name\",\n        accessor:d=>{\n          return(\n            <span>\n              {d.team_name === \"\" ? \"--\" : <span>{d.team_name}</span>}\n            </span>\n          )\n        }\n      },\n      {\n        Header: \"Team Strength\",\n        accessor: (d) => {\n          return <span>{d.team_strength == \"\" ? \"0\" : <span>{d.team_strength}</span>}</span>;\n        },\n      },\n      {\n        Header: \"Tags\",\n        accessor: (d) => {\n          return <span>{d.team_tag == \"\" ? \"--\" : <span>{d.team_tag}</span>}</span>;\n        },\n      },\n      {\n        Header: \"Action\",\n        disableSortBy: true,\n        accessor: (user) => {\n          return (\n            <CCardBody className=\"d-flex justify-content-start align-items-center ps-0 gap-2\">\n              <FaEdit className=\"cursor\"\n              title=\"Update Team\"\n                onClick={() => handleEdit(user)}\n              />\n\n              <FaTrash className=\"cursor\" title=\"Delete Team\" onClick={() => handleDelete(user.id)} />\n            </CCardBody>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  \n  return (\n    <CCard className=\"mb-4\">\n        {isLoader ? <Spinner className=\"modal-spinner\" /> : null}\n      <CCardBody>\n        <CContainer className=\"d-flex justify-content-end gap-3 mb-4\">\n          <CButton color=\"info\" className=\"button-size d-flex justify-content-center align-items-center text-white\" onClick={handleOpneMadal}>\n              <BsFillPlusCircleFill className=\"me-1 button-icon\" />\n              Add\n          </CButton>\n        </CContainer>\n        <CCard>\n          {true && <ReactTable data={ teamsList?.teamList || []} columns={columns} />}\n        </CCard>\n      </CCardBody>\n      <Add />\n      <ConfirmationModel/>\n    </CCard>\n  );\n};\n\nexport default Teams;\n","export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n","import React, { useEffect } from \"react\";\nimport {\n  useSortBy,\n  useTable,\n  usePagination,\n  useGlobalFilter,\n} from \"react-table\";\nimport { BsArrowDown, BsArrowUp } from \"react-icons/bs\";\nimport { useSelector } from \"react-redux\";\n\nconst ReactTable = ({ data, columns }) => {\n  const {searchField} = useSelector((state)=>state.users)\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: false,\n      initialState: { pageIndex: 0, pageSize: 10 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    state,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    pageCount,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  useEffect(()=>{\n    gotoPage(0)\n  },[searchField])\n\n  useEffect(()=>{\n    if(data?.length % 10 ===0){\n      previousPage()\n    }\n  },[data])\n\n  useEffect(() => {\n    window.scrollTo({top: 0, left: 0, behavior: 'instant'});\n  }, [pageIndex]);\n  \n  return (\n    <>\n      <div>\n        <table {...getTableProps()} className=\"category-table\">\n          <thead className=\"category-table-head\">\n            {headerGroups.map((headerGroups, index) => (\n              <tr {...headerGroups.getHeaderGroupProps()} key={index}>\n                {headerGroups.headers.map((columns,index) => (\n                  <th key={index}>\n                    {columns.render(\"Header\")}\n                    <span {...columns.getHeaderProps(columns.getSortByToggleProps())}>\n                    {!columns.disableSortBy &&\n                      (columns.isSorted ? (\n                        columns.isSortedDesc ? (\n                          <>\n                          <BsArrowDown className=\"arrow-down\" />\n                          <BsArrowUp />\n                          </>\n                        ) : (\n                          <>\n                          <BsArrowDown />\n                          <BsArrowUp className=\"arrow-down\" />\n                          </>\n                        )\n                      ) : (\n                        <>\n                          <BsArrowUp />\n                          <BsArrowDown />\n                        </>\n                      ))}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"category-table-body\">\n            {data.length !== 0 ? (\n              page.map((row,index) => {\n                prepareRow(row);\n                return (\n                  <tr className=\"th-table\" {...row.getRowProps()} key={index}>\n                    {row.cells.map((cell, index) => {\n                      return (\n                        <th className=\"th-table-data\" {...cell.getCellProps()} key={index}>{cell.render(\"Cell\")}</th>\n                      );\n                    })}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan={columns.length}> No record found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {data?.length > 10 ? (\n        <div className=\"pagination-button\">\n          <button onClick={() => gotoPage(0)} disabled={pageIndex === 0}>\n          {'<<'}\n        </button>{' '}\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n           {'<'}\n          </button>\n          <strong className=\"me-2\">\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{\" \"}\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\n            {'>'}\n          </button>\n          <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={pageIndex === pageCount - 1}\n        >\n          {'>>'}\n        </button>{' '}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default ReactTable;\n"],"names":["useSelector","state","team","addModal","toggleTeamModal","teamUpdatePreValue","submitStatus","isLoader","dispatch","useDispatch","useFormik","enableReinitialize","initialValues","team_name","team_tag","validationSchema","AddTeamSchema","onSubmit","data","action","addTeams","updateTeam","id","toggleTeamModalTrue","setTeamUpdatePreValue","values","handleChange","handleSubmit","errors","touched","handleBlur","resetForm","setFieldValue","alignment","size","visible","Spinner","color","className","onClick","closeAddModal","md","htmlFor","type","name","value","maxLength","onChange","onBlur","sm","setSubmit","setUpdate","confirmMessage","deleteId","closeModal","closeConfirmMessage","teamDeleteId","deleteTeams","teamsList","useEffect","getTeams","columns","useMemo","Header","accessor","d","team_strength","disableSortBy","user","title","openAddModal","toggleTeamModalFalse","handleEdit","openConfirmMessage","ReactTable","teamList","FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","AgentAddSchema","Yup","teamId","required","first_name","trim","matches","last_name","email","mobile","min","max","website","dob","plate_number","vehicle_type","delivery_area","AutoAlloactionSchema","maxRadius","AddGeoFenceSchema","geofencing_name","location","teamName","coordinates","AddManagerSchema","status","AddPricingRuleSchema","geoFenceId","nullable","agentVehicle","basePrice","test","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","includes","AddMerchantSchema","pincode","address","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate","users","searchField","tableInstance","useTable","autoResetPage","initialState","pageIndex","pageSize","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","pageCount","length","window","scrollTo","top","left","behavior","map","index","getHeaderGroupProps","key","headers","render","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","colSpan","disabled"],"sourceRoot":""}