{"version":3,"file":"static/js/5210.7d455f15.chunk.js","mappings":"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","sources":["dispatcherPanel/views/Manager/modal/SwitchToggle.js","dispatcherPanel/views/Manager/modal/UpdateManager.js"],"sourcesContent":["import Switch from \"@mui/material/Switch\";\nimport React, { useEffect, useState } from \"react\";\n\nconst SwitchToggle = ({ isChecked, setPermission, id }) => {\n  const [check, setCheck] = useState(false);\n  useEffect(() => {\n    setCheck(isChecked);\n  }, [isChecked]);\n\n  const handleToggle = (userID) => {\n    setPermission((prevUserIDs) => {\n      const index = prevUserIDs.indexOf(userID);\n      \n      if (index > -1) {\n        return prevUserIDs.filter((id) => id !== userID);\n      } else {\n        return [...prevUserIDs, userID];\n      }\n    });\n  };\n  \n  return (\n    <Switch\n      name={id}\n      onChange={(e) => {\n        setCheck(!check);\n        // setPermission((prev) => [...prev, e.target.name]);\n        handleToggle(e.target.name)\n      }}\n      inputProps={{ \"aria-label\": \"controlled\" }}\n      checked={check}\n    />\n  );\n};\n\nexport default SwitchToggle;\n","import {\n  CButton,\n  CCard,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CRow,\n} from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getManagerById,\n  getPermission,\n  updateSub_admin,\n} from \"src/features/manageManager/ManagerSlice\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport SwitchToggle from \"./SwitchToggle\";\nimport Switch from \"@mui/material/Switch\";\nimport Spinner from \"src/spinner/Spinner\";\nconst UpdateManager = () => {\n  const { permission, isLoader, managerById } = useSelector(\n    (state) => state.manager\n  );\n  const partitionValue = Math.ceil(permission?.permission?.length / 2);\n\n  const [perm, setPermission] = useState([]);\n  const [check, setCheck] = useState(false);\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getManagerById(id));\n    dispatch(getPermission());\n  }, []);\nconsole.log(perm)\n\n// let unique = perm.filter((item, i, ar) => ar.indexOf(item) === i);\n// console.log(\"unique\",unique)\n  const { values, handleSubmit, setFieldValue, errors, touched } = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      first_name: managerById?.users?.first_name\n        ? managerById?.users?.first_name\n        : \"\",\n      last_name: managerById?.users?.last_name\n        ? managerById?.users?.last_name\n        : \"\",\n      email: managerById?.users?.email ? managerById?.users?.email : \"\",\n      mobile: managerById?.users?.mobile ? managerById?.users?.mobile : \"\",\n      status: managerById?.admins ? managerById?.admins : \"\",\n      entity_type:[],\n    },\n    onSubmit: (data, { resetForm }) => {\n      dispatch(updateSub_admin({ id, data }));\n      navigate(\"/dispatcher/manageManager\");\n      resetForm({ data: \"\" });\n    },\n  });\n\n  const options = [\n    { value: \"active\", label: \"Active\" },\n    { value: \"inActive\", label: \"InActive\" },\n  ];\n  const getPermissionMatch = (id) => {\n    const temp = managerById?.entities?.filter((item) => item.id === id);\n    return temp?.length > 0 ? true : false;\n  };\n\n  return (\n    <CCard className=\"mb-4\">\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CForm className=\"p-3\" onSubmit={handleSubmit}>\n        <CRow>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              First Name\n            </label>\n            <CFormInput\n              type=\"text\"\n              name=\"first_name\"\n              value={values.first_name}\n              disabled={true}\n            />\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Last Name\n            </label>\n            <CFormInput\n              type=\"text\"\n              name=\"last_name\"\n              value={values.last_name}\n              disabled={true}\n            />\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Email\n            </label>\n            <CFormInput\n              type=\"text\"\n              name=\"email\"\n              value={values.email}\n              disabled={true}\n            />\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Phone Number\n            </label>\n            <CFormInput\n              type=\"text\"\n              name=\"mobile\"\n              value={values.mobile}\n              disabled={true}\n            />\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Status<span className=\"text-danger\">*</span>\n            </label>\n            <Select\n              options={options}\n              value={options.find((option) => option.value === values.status)}\n              onChange={(option) => setFieldValue(\"status\", option.value)}\n            />{\" \"}\n            <div className=\"error-container\">\n              {touched.status && errors.status ? (\n                <span className=\"validtion-error\">{errors.status}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={12} className=\"mt-4\">\n            <CRow>\n              <CCol md={6}>\n                <CRow className=\"d-flex align-items-center\">\n                  <CCol md={9} className=\"addmanager-status\">\n                    Permission\n                  </CCol>\n                  <CCol md={3} className=\"addmanager-status\">\n                    Status\n                  </CCol>\n                  {permission?.permission\n                    ?.slice(0, partitionValue)\n                    .map((list, index) => {\n                      return (\n                        <CRow key={index} className=\"d-flex align-items-center\">\n                          <CCol md={1} className=\"fs-3\">\n                            •\n                          </CCol>\n                          <CCol md={8}>{list.entity_name}</CCol>\n                          <CCol md={3}>\n                            <SwitchToggle\n                              isChecked={getPermissionMatch(list.id)}\n                              setPermission={setPermission}\n                              id={list.id}\n                            />\n                          </CCol>\n                        </CRow>\n                      );\n                    })}\n                </CRow>\n              </CCol>\n              <CCol md={6}>\n                <CRow className=\"d-flex align-items-center\">\n                  <CCol md={9} className=\"addmanager-status\">\n                    Permission\n                  </CCol>\n                  <CCol md={3} className=\"addmanager-status\">\n                    Status\n                  </CCol>\n                  {permission?.permission\n                    ?.slice(partitionValue)\n                    .map((list, index) => {\n                      return (\n                        <CRow key={index} className=\"d-flex align-items-center\">\n                          <CCol md={1} className=\"fs-3\">\n                            •\n                          </CCol>\n                          <CCol md={8}>{list.entity_name}</CCol>\n                          <CCol md={3}>\n                            <SwitchToggle\n                              isChecked={getPermissionMatch(list.id)}\n                              setPermission={setPermission}\n                              id={list.id}\n                            />\n                          </CCol>\n                        </CRow>\n                      );\n                    })}\n                </CRow>\n              </CCol>\n            </CRow>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol md={7} className=\"d-flex justify-content-end mt-4\">\n            <CButton\n              type=\"submit\"\n              color=\"info\"\n              className=\"w-25 text-light\"\n              onClick={() => {\n                setFieldValue(\"entity_type\", perm);\n              }}\n            >\n              Update\n            </CButton>\n          </CCol>\n        </CRow>\n      </CForm>\n    </CCard>\n  );\n};\n\nexport default UpdateManager;\n"],"names":["isChecked","setPermission","id","useState","check","setCheck","useEffect","Switch","name","onChange","e","userID","target","prevUserIDs","indexOf","filter","inputProps","checked","useSelector","state","manager","permission","isLoader","managerById","partitionValue","Math","ceil","length","perm","useParams","navigate","useNavigate","dispatch","useDispatch","getManagerById","getPermission","console","log","useFormik","enableReinitialize","initialValues","first_name","users","last_name","email","mobile","status","admins","entity_type","onSubmit","data","resetForm","updateSub_admin","values","handleSubmit","setFieldValue","errors","touched","options","value","label","getPermissionMatch","temp","entities","item","className","Spinner","color","md","htmlFor","type","disabled","find","option","slice","map","list","index","entity_name","onClick"],"sourceRoot":""}