{"version":3,"file":"static/js/7926.c70243d2.chunk.js","mappings":"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","sources":["utils/HandlerCommonFile.js","validateSchema/Schema.js","views/Customers/model/Add.js","views/Customers/model/EditModel.js","views/Customers/model/ImportModel.js","views/Customers/model/ConfirmationModel.js","views/Customers/customer.js","views/ReactTable/ReactTable.js"],"sourcesContent":["export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n","import {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport * as Yup from \"yup\";\nimport { addCustomer, closeModal } from \"src/features/customer/CustomerSlice\";\nimport PhoneInput from \"react-phone-number-input\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { AddCustomerSchema } from \"src/validateSchema/Schema\";\n\nconst Add = () => {\n  const { isModalOpen, isLoader } = useSelector((state) => state.users);\n  const dispatch = useDispatch();\n\n\n  const {\n    values,\n    handleChange,\n    handleSubmit,\n    errors,\n    touched,\n    handleBlur,\n    resetForm,\n    setFieldValue,\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      mobile: \"\",\n      image: \"\",\n    },\n    validationSchema: AddCustomerSchema,\n    onSubmit: (data, action) => {\n      dispatch(addCustomer({ data, action }));\n      // action.resetForm()\n    },\n  });\n\n  const handlCloseModel = () => {\n    dispatch(closeModal());\n    resetForm();\n  };\n  return (\n    <CModal size=\"lg\" visible={isModalOpen}>\n      {isLoader ? <Spinner className=\"modal-spinner\" /> : null}\n      <CHeader className=\"rounded-top\">\n        <CModalTitle className=\"\">Add Customer</CModalTitle>\n        <ImCross\n          onClick={handlCloseModel}\n          className=\"text-danger cursor fs-5 me-2\"\n        />\n      </CHeader>\n      <CModalBody className=\"d-flex w-100\">\n        <CForm className=\"row g-3\" onSubmit={handleSubmit}>\n          <CCol md={12}>\n            <CRow>\n              <CCol md={6} className=\"\">\n                <CFormLabel htmlFor=\"logo\">\n                  Image\n                  <CFormInput\n                    type=\"file\"\n                    name=\"image\"\n                    accept=\".png, .jpg, .jpeg\"\n                    className=\"CFormInput-customer\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      setFieldValue(\"image\", e.currentTarget.files[0]);\n                    }}\n                  />\n                  <div className=\"error-container\">\n                    {touched.image && errors.image ? (\n                      <span className=\"validtion-error\">{errors.image}</span>\n                    ) : null}\n                  </div>\n                </CFormLabel>\n              </CCol>\n            </CRow>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              First Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer01\"\n              name=\"first_name\"\n              maxLength={30}\n              value={values.first_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.first_name && errors.first_name ? (\n                <span className=\"validtion-error\">{errors.first_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Last Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer01\"\n              name=\"last_name\"\n              maxLength={30}\n              value={values.last_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.last_name && errors.last_name ? (\n                <span className=\"validtion-error\">{errors.last_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer02\">\n              Email<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer02\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.email && errors.email ? (\n                <span className=\"validtion-error\">{errors.email}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer03\">\n              Phone Number<span className=\"text-danger\">*</span>\n            </label>\n            {/* <CFormInput\n              type=\"phone\"\n              id=\"validationServer03\"\n              name=\"mobile\"\n              value={values.mobile}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            /> */}\n            <PhoneInput\n              international\n              defaultCountry=\"IN\"\n              id=\"validationServer03\"\n              name=\"mobile\"\n              value={values.mobile}\n              onChange={(value) => setFieldValue(\"mobile\", value)}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.mobile && errors.mobile ? (\n                <span className=\"validtion-error\">{errors.mobile}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol sm={12} className=\"d-flex justify-content-center\">\n            <CButton type=\"submit\" color=\"info\" className=\"w-25 text-light\">\n              Submit\n            </CButton>\n          </CCol>\n        </CForm>\n      </CModalBody>\n    </CModal>\n  );\n};\n\nexport default Add;\n","import {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalTitle,\n} from \"@coreui/react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport * as Yup from \"yup\";\nimport { closeEditModal, editUsers } from \"src/features/customer/CustomerSlice\";\nimport Spinner from \"src/spinner/Spinner\";\nimport PhoneInput from \"react-phone-number-input\";\nimport { UpdateCustomerSchema } from \"src/validateSchema/Schema\";\nconst EditModel = () => {\n  const { isEditModalOpen, editUser, isLoader } = useSelector(\n    (state) => state.users\n  );\n  const id = editUser?.id;\n  const dispatch = useDispatch();\n\n  const {\n    values,\n    handleChange,\n    resetForm,\n    handleSubmit,\n    errors,\n    touched,\n    setFieldValue,\n    handleBlur,\n  } = useFormik({\n    initialValues: {\n      first_name: editUser?.first_name ? editUser?.first_name : \"\",\n      last_name: editUser?.last_name ? editUser?.last_name : \"\",\n      mobile: editUser?.mobile ? editUser.mobile : \"\",\n    },\n    enableReinitialize: true,\n    validationSchema: UpdateCustomerSchema,\n    onSubmit: (data, action) => {\n      dispatch(editUsers({ data, id }));\n      dispatch(closeEditModal());\n      action.resetForm();\n    },\n  });\n\n  const handlCloseModel = () => {\n    dispatch(closeEditModal());\n    resetForm();\n  };\n  return (\n    <CModal size=\"lg\" visible={isEditModalOpen}>\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CHeader className=\"rounded-top\">\n        <CModalTitle className=\"\">Update Customer</CModalTitle>\n        <ImCross\n          onClick={handlCloseModel}\n          className=\"text-danger cursor fs-5 me-2\"\n        />\n      </CHeader>\n      <CModalBody className=\"d-flex w-100\">\n        <CForm className=\"row g-3\" onSubmit={handleSubmit}>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              First Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer01\"\n              name=\"first_name\"\n              maxLength={30}\n              value={values.first_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.first_name && errors.first_name ? (\n                <span className=\"validtion-error\">{errors.first_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Last Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer01\"\n              name=\"last_name\"\n              maxLength={30}\n              value={values.last_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.last_name && errors.last_name ? (\n                <span className=\"validtion-error\">{errors.last_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer03\">\n              Phone Number<span className=\"text-danger\">*</span>\n            </label>\n            {/* <CFormInput\n              type=\"phone\"\n              id=\"validationServer03\"\n              name=\"mobile\"\n              value={values.mobile}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            /> */}\n            <PhoneInput\n              international\n              defaultCountry=\"IN\"\n              id=\"validationServer03\"\n              name=\"mobile\"\n              value={values.mobile}\n              onChange={(value) => setFieldValue(\"mobile\", value)}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.mobile && errors.mobile ? (\n                <span className=\"validtion-error\">{errors.mobile}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol sm={12} className=\"d-flex justify-content-center\">\n            <CButton type=\"submit\" color=\"info\" className=\"w-25 text-light\">\n              Update\n            </CButton>\n          </CCol>\n        </CForm>\n      </CModalBody>\n    </CModal>\n  );\n};\n\nexport default EditModel;\n","import {\n  CButton,\n  CForm,\n  CFormInput,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalContent,\n  CModalFooter,\n  CModalTitle,\n} from \"@coreui/react\";\nimport { Formik, useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport * as Yup from \"yup\";\nimport {\n  closeImportModal,\n  importCustomerCSVFile,\n  setErrorMessageHide,\n} from \"src/features/customer/CustomerSlice\";\nimport { ImportCustomerSchema } from \"src/validateSchema/Schema\";\nimport { useEffect, useState } from \"react\";\nconst ImportModel = () => {\n  const { isImportModalOpen, errorMessage, errorMessageHide } = useSelector(\n    (state) => state.users\n  );\nconst [errorMessageModal,setErrorMessageModal] = useState(true)\n\n  const dispatch = useDispatch();\n\n  const { values, handleSubmit, errors, touched, setFieldValue, resetForm } =\n    useFormik({\n      initialValues: {\n        file: \"\",\n      },\n      validationSchema: ImportCustomerSchema,\n      onSubmit: (data, action) => {\n        dispatch(importCustomerCSVFile(data));\n        action.resetForm();\n      },\n    });\n  const closeImpModal = () => {\n    dispatch(closeImportModal());\n    dispatch(setErrorMessageHide(false))\n    resetForm();\n  };\n  return (\n    <CModal alignment=\"center\" visible={isImportModalOpen}>\n      <CHeader className=\"rounded-top\">\n        <CModalTitle>Import Customer</CModalTitle>\n        <ImCross\n          className=\"text-danger cursor fs-5 me-2\"\n          onClick={closeImpModal}\n        />\n      </CHeader>\n      <CForm onSubmit={handleSubmit}>\n        <CModalBody>\n          {errorMessageHide && (\n            <CModalTitle className=\"modalTitle\">{errorMessage}</CModalTitle>\n          )}\n          <CFormInput\n            type=\"file\"\n            name=\"file\"\n            accept=\".csv\"\n            onChange={(e) => {\n              setFieldValue(\"file\", e.currentTarget.files[0]);\n            }}\n          />\n          <div className=\"error-container\">\n            {touched.file && errors.file ? (\n              <span className=\"validtion-error\">{errors.file}</span>\n            ) : null}\n          </div>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={closeImpModal}>\n            Close\n          </CButton>\n          <CButton color=\"info\" className=\"text-white\" type=\"submit\">\n            Import CSV\n          </CButton>\n        </CModalFooter>\n      </CForm>\n    </CModal>\n  );\n};\n\nexport default ImportModel;\n","import {\n  CButton,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  closeConfirmModal,\n  deleteUsers,\n  userDeleteId,\n} from \"src/features/customer/CustomerSlice\";\nimport { ImCross } from \"react-icons/im\";\nconst ConfirmationModel = () => {\n  const dispatch = useDispatch();\n  const { confirmMessage, deleteId } = useSelector((state) => state.users);\n\n\n  const confirmButton = () => {\n    dispatch(deleteUsers(deleteId));\n    dispatch(closeConfirmModal());\n  };\n  const closeModal = () => {\n    dispatch(closeConfirmModal());\n    dispatch(userDeleteId(null));\n  };\n  return (\n    <CModal alignment=\"center\" visible={confirmMessage}>\n      <CHeader className=\"rounded-top\">\n        <CModalTitle></CModalTitle>\n        <ImCross className=\"text-danger cursor fs-5 me-2\" onClick={closeModal} />\n      </CHeader>\n      <CModalBody className=\"confirmCardText fs-6 w-100 d-flex justify-content-center\">\n        Do you really want to delete this record?\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={closeModal}>\n          No\n        </CButton>\n        <CButton\n          color=\"info\"\n          className=\"text-white\"\n          type=\"submit\"\n          onClick={confirmButton}\n        >\n          Yes\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default ConfirmationModel;\n","import { useEffect, useMemo } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CFormInput,\n  CLink,\n  CRow,\n} from \"@coreui/react\";\nimport { MdHomeWork } from \"react-icons/md\";\nimport { RiBriefcase2Fill } from \"react-icons/ri\";\nimport { TiBusinessCard } from \"react-icons/ti\";\nimport { BiImport, BiExport } from \"react-icons/bi\";\nimport { BsFillPlusCircleFill } from \"react-icons/bs\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getUsers,\n  openConfirmModal,\n  openEditModal,\n  openImportModal,\n  openModal,\n  searchCustomer,\n  setEditUser,\n  setSearchField,\n} from \"src/features/customer/CustomerSlice\";\nimport { activeUsers, userDeleteId } from \"src/features/customer/CustomerSlice\";\nimport Switch from \"@mui/material/Switch\";\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport Add from \"./model/Add\";\nimport EditModel from \"./model/EditModel\";\nimport ReactTable from \"../ReactTable/ReactTable\";\nimport ImportModel from \"./model/ImportModel\";\nimport Spinner from \"src/spinner/Spinner\";\nimport ConfirmationModel from \"./model/ConfirmationModel\";\nimport { useNavigate } from \"react-router-dom\";\nimport { sidebarPermissionForSubAdmin } from \"src/features/manageManager/ManagerSlice\";\nimport { toast } from \"react-toastify\";\n\nconst customer = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const users = useSelector((store) => store.users.users);\n  const { isLoader } = useSelector((store) => store.users);\n  const { sidebarPerm } = useSelector((state) => state.manager);\n\n  const customer = sidebarPerm?.permissions?.some(\n    (ele) => ele.entity_name === \"Customers\"\n  );\n\n  useEffect(() => {\n    if (!customer) {\n      navigate(\"/dashboard\");\n    }\n    dispatch(sidebarPermissionForSubAdmin());\n  }, []);\n\n  useEffect(() => {\n    dispatch(getUsers());\n  }, []);\n\n  const handleEdit = (user) => {\n    dispatch(setEditUser(user));\n    dispatch(openEditModal());\n  };\n  const handleDelete = (id) => {\n    dispatch(openConfirmModal());\n    dispatch(userDeleteId(id));\n  };\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Name\",\n        accessor: (d) => {\n          return (\n            <span>\n              {d.first_name} {d.last_name}\n            </span>\n          );\n        },\n      },\n      {\n        Header: \"Email\",\n        accessor: (d) => {\n          return <span>{d.email == \"\" ? \"--\" : <span>{d.email}</span>}</span>;\n        },\n      },\n      {\n        Header: \"Phone\",\n        accessor: (d) => {\n          return <span>{d.mobile == \"\" ? \"--\" : <span>{d.mobile}</span>}</span>;\n        },\n      },\n      {\n        Header: \"Status\",\n        disableSortBy: true,\n        accessor: (d) => {\n          return (\n            <Switch\n              onChange={() => dispatch(activeUsers(d.id))}\n              checked={d.isActive}\n            />\n          );\n        },\n      },\n      {\n        Header: \"Action\",\n        disableSortBy: true,\n        accessor: (user) => {\n          return (\n            <CCardBody className=\"d-flex justify-content-start align-items-center ps-0 gap-2\">\n              <FaEdit className=\"cursor\" title=\"Update Customer\" onClick={() => handleEdit(user)} />\n\n              <FaTrash\n                className=\"cursor\"\n                title=\"Delete Customer\"\n                onClick={() => handleDelete(user.id)}\n              />\n            </CCardBody>\n          );\n        },\n      },\n    ],\n    []\n  );\n  const noDataMessage = () => toast.error(`No Customer`);\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        {isLoader ? (\n          <Spinner color=\"primary\" className=\"modal-spinner\" />\n        ) : null}\n\n        <CCardBody>\n          <CContainer className=\"d-flex justify-content-end gap-3 mb-4\">\n              {users?.users?.length ? (\n                <CButton color=\"info\" className=\"button-size d-flex justify-content-center align-items-center\">\n                <CLink\n                  className=\"text-decoration-none text-white\"\n                  href={`https://delivery-app.softprodigyphp.in/exportCSV`}\n                  download=\"filename.csv\"\n                >\n                  <BiExport className=\"me-1 button-icon\" />\n                  Export\n                </CLink>\n                </CButton>\n              ) : (\n                <CButton color=\"info\" className=\"button-size\" onClick={() => noDataMessage()}>\n                <CLink className=\"text-decoration-none text-white\">\n                  <BiExport className=\"me-1 button-icon\" />\n                  Export\n                </CLink>\n                </CButton>\n              )}\n            <CButton\n              className=\"button-size d-flex justify-content-center align-items-center text-white\"\n              color=\"info\"\n              onClick={() => dispatch(openImportModal())}\n            >\n              <BiImport className=\"me-1 button-icon\" />\n              Import\n            </CButton>\n            <CButton\n              className=\"button-size d-flex justify-content-center align-items-center text-white\"\n              color=\"info\"\n              onClick={() => dispatch(openModal())}\n            >\n              <BsFillPlusCircleFill className=\"me-1 button-icon\" />\n              Add\n            </CButton>\n          </CContainer>\n          <CContainer className=\"d-flex justify-content-between align-items-center w-100 text-center fs-6\">\n            <CContainer className=\"upperData-section\">\n              {users ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <MdHomeWork className=\"text-dark fs-5 me-2\" />{\" \"}\n                    {users?.activeUsers}\n                  </span>\n                  <p className=\"text-black\">Active User</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <MdHomeWork className=\"text-dark fs-5 me-2\" /> 0\n                  </span>\n                  <p className=\"text-black\">Active User</p>\n                </>\n              )}\n            </CContainer>\n            <CContainer className=\"upperData-section\">\n              {users ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <RiBriefcase2Fill className=\"text-dark fs-5 me-2\" />{\" \"}\n                    {users?.inActiveUsers}\n                  </span>\n                  <p className=\"text-black\">Inactive User</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <RiBriefcase2Fill className=\"text-dark fs-5 me-2\" /> 0\n                  </span>\n                  <p className=\"text-black\">Inactive User</p>\n                </>\n              )}\n            </CContainer>\n            <CContainer className=\"upperData-section\">\n              {users ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <TiBusinessCard className=\"text-dark fs-5 me-2\" />{\" \"}\n                    {users?.socialLogin}\n                  </span>\n                  <p className=\"text-black\">Social Login Account</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <TiBusinessCard className=\"text-dark fs-5 me-2\" /> 0\n                  </span>\n                  <p className=\"text-black\">Social Login Account</p>\n                </>\n              )}\n            </CContainer>\n          </CContainer>\n          <CRow>\n            <CCol sm={7}></CCol>\n            <CCol sm={5} className=\"d-flex justify-content-end\">\n              <CFormInput\n                type=\"search\"\n                maxLength={100}\n                className=\"w-75 mt-4 mb-3 border border-dark\"\n                placeholder=\"Search by Name...\"\n                onChange={(e) => {\n                  dispatch(searchCustomer({ search: e.target.value.trim() }));\n                  dispatch(setSearchField(e.target.value));\n                }}\n              />\n            </CCol>\n          </CRow>\n          <CCard>\n            {true && <ReactTable data={users?.users || []} columns={columns} />}\n          </CCard>\n          <Add />\n          <EditModel />\n          <ImportModel />\n          <ConfirmationModel />\n        </CCardBody>\n      </CCard>\n    </>\n  );\n};\n\nexport default customer;\n","import React, { useEffect } from \"react\";\nimport {\n  useSortBy,\n  useTable,\n  usePagination,\n  useGlobalFilter,\n} from \"react-table\";\nimport { BsArrowDown, BsArrowUp } from \"react-icons/bs\";\nimport { useSelector } from \"react-redux\";\n\nconst ReactTable = ({ data, columns }) => {\n  const {searchField} = useSelector((state)=>state.users)\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: false,\n      initialState: { pageIndex: 0, pageSize: 10 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    state,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    pageCount,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  useEffect(()=>{\n    gotoPage(0)\n  },[searchField])\n\n  useEffect(()=>{\n    if(data?.length % 10 ===0){\n      previousPage()\n    }\n  },[data])\n\n  useEffect(() => {\n    window.scrollTo({top: 0, left: 0, behavior: 'instant'});\n  }, [pageIndex]);\n  \n  return (\n    <>\n      <div>\n        <table {...getTableProps()} className=\"category-table\">\n          <thead className=\"category-table-head\">\n            {headerGroups.map((headerGroups, index) => (\n              <tr {...headerGroups.getHeaderGroupProps()} key={index}>\n                {headerGroups.headers.map((columns,index) => (\n                  <th key={index}>\n                    {columns.render(\"Header\")}\n                    <span {...columns.getHeaderProps(columns.getSortByToggleProps())}>\n                    {!columns.disableSortBy &&\n                      (columns.isSorted ? (\n                        columns.isSortedDesc ? (\n                          <>\n                          <BsArrowDown className=\"arrow-down\" />\n                          <BsArrowUp />\n                          </>\n                        ) : (\n                          <>\n                          <BsArrowDown />\n                          <BsArrowUp className=\"arrow-down\" />\n                          </>\n                        )\n                      ) : (\n                        <>\n                          <BsArrowUp />\n                          <BsArrowDown />\n                        </>\n                      ))}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"category-table-body\">\n            {data.length !== 0 ? (\n              page.map((row,index) => {\n                prepareRow(row);\n                return (\n                  <tr className=\"th-table\" {...row.getRowProps()} key={index}>\n                    {row.cells.map((cell, index) => {\n                      return (\n                        <th className=\"th-table-data\" {...cell.getCellProps()} key={index}>{cell.render(\"Cell\")}</th>\n                      );\n                    })}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan={columns.length}> No record found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {data?.length > 10 ? (\n        <div className=\"pagination-button\">\n          <button onClick={() => gotoPage(0)} disabled={pageIndex === 0}>\n          {'<<'}\n        </button>{' '}\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n           {'<'}\n          </button>\n          <strong className=\"me-2\">\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{\" \"}\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\n            {'>'}\n          </button>\n          <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={pageIndex === pageCount - 1}\n        >\n          {'>>'}\n        </button>{' '}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default ReactTable;\n"],"names":["FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","AgentAddSchema","Yup","teamId","required","type","first_name","trim","matches","last_name","email","mobile","min","max","website","dob","plate_number","vehicle_type","delivery_area","AutoAlloactionSchema","maxRadius","AddGeoFenceSchema","geofencing_name","location","teamName","coordinates","AddManagerSchema","status","AddPricingRuleSchema","name","geoFenceId","nullable","agentVehicle","basePrice","test","value","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddTeamSchema","team_name","team_tag","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","includes","AddMerchantSchema","pincode","address","state","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","size","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate","useSelector","users","isModalOpen","isLoader","dispatch","useDispatch","useFormik","enableReinitialize","initialValues","image","validationSchema","onSubmit","data","action","addCustomer","values","handleChange","handleSubmit","errors","touched","handleBlur","resetForm","setFieldValue","visible","Spinner","className","onClick","closeModal","md","htmlFor","accept","onBlur","onChange","e","currentTarget","files","id","maxLength","international","defaultCountry","sm","color","isEditModalOpen","editUser","editUsers","closeEditModal","isImportModalOpen","errorMessage","errorMessageHide","useState","importCustomerCSVFile","closeImpModal","closeImportModal","setErrorMessageHide","alignment","confirmMessage","deleteId","closeConfirmModal","userDeleteId","deleteUsers","navigate","useNavigate","store","sidebarPerm","manager","customer","permissions","some","ele","entity_name","useEffect","sidebarPermissionForSubAdmin","getUsers","columns","useMemo","Header","accessor","d","disableSortBy","Switch","activeUsers","checked","isActive","user","title","setEditUser","openEditModal","handleEdit","openConfirmModal","length","href","download","toast","openImportModal","openModal","inActiveUsers","socialLogin","placeholder","searchCustomer","search","target","setSearchField","ReactTable","searchField","tableInstance","useTable","autoResetPage","initialState","pageIndex","pageSize","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","pageCount","window","scrollTo","top","left","behavior","map","index","getHeaderGroupProps","key","headers","render","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","colSpan","disabled"],"sourceRoot":""}