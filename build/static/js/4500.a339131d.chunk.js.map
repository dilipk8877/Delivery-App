{"version":3,"file":"static/js/4500.a339131d.chunk.js","mappings":"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","sources":["dispatcherPanel/views/agent/modal/Add.js","dispatcherPanel/views/agent/modal/ConfirmationModel.js","dispatcherPanel/views/agent/modal/AssignTeam.js","dispatcherPanel/views/agent/Agent.js","utils/HandlerCommonFile.js","validateSchema/Schema.js"],"sourcesContent":["import {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormSelect,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport { addAgents, closeAgentAddModal } from \"src/features/agents/AgentSlice\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\nimport { getTeams } from \"src/features/teams/TeamSlice\";\nimport { getVehicleType } from \"src/features/pricingRule/PricingSLice\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { useLocation } from \"react-router-dom\";\nimport PhoneInput from \"react-phone-number-input\";\nimport { AgentAddSchema } from \"src/validateSchema/Schema\";\n\nconst Add = () => {\n  const { vehicleType } = useSelector((state) => state.pricingRule);\n  const { agentAddModal, isLoader, currentSTs } = useSelector((state) => state.agent);\n  const team = useSelector((state) => state.team.teamsList);\n  const [urlPath, setUrlPath] = useState();\n  const [selectedOption, setSelectedOption] = useState(null);\n  const dispatch = useDispatch();\n  const userId = selectedOption?.value;\n  const testArray = [];\n  const data = team?.teamList;\n  data?.forEach((item) => {\n    testArray.push({\n      value: `${item.team_name}`,\n      label: `${item.team_name}`,\n      value: item.id,\n    });\n  });\n\n  const vehicleTypeArray = [];\n  const vehicleTypeData = vehicleType?.theVehicleType;\n  vehicleTypeData?.forEach((item) => {\n    vehicleTypeArray.push({\n      value: `${item.driverVehicleType}`,\n      label: `${item.driverVehicleType}`,\n    });\n  });\n\n  useEffect(() => {\n    dispatch(getTeams());\n    dispatch(getVehicleType());\n  }, []);\n  const handlCloseModel = () => {\n    dispatch(closeAgentAddModal());\n    resetForm();\n  };\n\n  const location = useLocation();\n  const { pathname } = location;\n  useEffect(() => {\n    const splitLocation = pathname?.split(\"/\");\n    if (splitLocation[2] === \"active\") {\n      setUrlPath(\"isActive=1\");\n    } else if (splitLocation[2] === \"awaiting\") {\n      setUrlPath(\"isAwaiting=0\");\n    } else if (splitLocation[1] === \"blocked\") {\n      setUrlPath(\"isBlocked=1\");\n    }\n  }, [pathname]);\n \n  const {\n    values,\n    handleBlur,\n    handleChange,\n    touched,\n    errors,\n    handleSubmit,\n    setFieldValue,\n    resetForm,\n  } = useFormik({\n    initialValues: {\n      teamId: userId,\n      type: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      mobile: \"\",\n      website: \"\",\n      dob: \"\",\n      plate_number: \"\",\n      vehicle_type: \"\",\n      delivery_area: \"\",\n    },\n    enableReinitialize: true,\n    validationSchema:AgentAddSchema,\n    onSubmit: (data, action) => {\n      dispatch(addAgents({ data, action, status: currentSTs }));\n    },\n  });\n  const today = new Date();\n  const maxDate = new Date(\n    today.getFullYear() - 18,\n    today.getMonth(),\n    today.getDate()\n  )\n    .toISOString()\n    .slice(0, 10);\n\n  const minDate = new Date(\n    today.getFullYear() - 100,\n    today.getMonth(),\n    today.getDate()\n  )\n    .toISOString()\n    .slice(0, 10);\n\n  const handleVehicleType = (selectedOption) => {\n    setFieldValue(\"vehicle_type\", selectedOption.value);\n  };\n  return (\n    <CModal size=\"lg\" visible={agentAddModal}>\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CHeader className=\"rounded-top\">\n        <CModalTitle>Add Agents</CModalTitle>\n        <ImCross\n          onClick={handlCloseModel}\n          className=\"text-danger cursor fs-5 me-2\"\n        />\n      </CHeader>\n      <CModalBody className=\"d-flex w-100\">\n        <CForm className=\"row g-3\" onSubmit={handleSubmit}>\n          <CCol className=\"me-4\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Select Team<span className=\"text-danger\">*</span>\n            </label>\n            <Select\n              className=\"assignDriver-dropdown\"\n              classNamePrefix=\"Select\"\n              isClearable\n              name=\"color\"\n              onChange={setSelectedOption}\n              options={testArray}\n            />\n            <div className=\"error-container\">\n              {touched.teamId && errors.teamId ? (\n                <span className=\"validtion-error\">{errors.teamId}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              First Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer01\"\n              name=\"first_name\"\n              maxLength={30}\n              value={values.first_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.first_name && errors.first_name ? (\n                <span className=\"validtion-error\">{errors.first_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer02\">\n              Last Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer02\"\n              name=\"last_name\"\n              maxLength={30}\n              value={values.last_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.last_name && errors.last_name ? (\n                <span className=\"validtion-error\">{errors.last_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer02\">\n              Email<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer02\"\n              name=\"email\"\n              maxLength={30}\n              value={values.email}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.email && errors.email ? (\n                <span className=\"validtion-error\">{errors.email}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer03\">\n              Phone Number<span className=\"text-danger\">*</span>\n            </label>\n            {/* <PhoneInput\n              name=\"mobile\"\n              value={values.mobile}\n              onChange={handleChange}\n              international={true}\n              onBlur={handleBlur}\n              defaultCountry=\"IN\"\n            /> */}\n            <PhoneInput\n              international\n              defaultCountry=\"IN\"\n              id=\"validationServer03\"\n              name=\"mobile\"\n              value={values.mobile}\n              onChange={(value) => setFieldValue(\"mobile\", value)}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.mobile && errors.mobile ? (\n                <span className=\"validtion-error\">{errors.mobile}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer05\">\n              Website<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer05\"\n              name=\"website\"\n              maxLength={70}\n              value={values.website}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.website && errors.website ? (\n                <span className=\"validtion-error\">{errors.website}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer05\">\n              Date of Birth<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"date\"\n              id=\"validationServer05\"\n              name=\"dob\"\n              value={values.dob}\n              max={maxDate}\n              min={minDate}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.dob && errors.dob ? (\n                <span className=\"validtion-error\">{errors.dob}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer05\">\n              Vehicle Reg. number<span className=\"text-danger\">*</span>\n            </label>\n\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer05\"\n              name=\"plate_number\"\n              maxLength={20}\n              value={values.plate_number}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.plate_number && errors.plate_number ? (\n                <span className=\"validtion-error\">{errors.plate_number}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer05\">\n              Delivery Area<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              id=\"validationServer05\"\n              name=\"delivery_area\"\n              maxLength={150}\n              value={values.delivery_area}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.delivery_area && errors.delivery_area ? (\n                <span className=\"validtion-error\">{errors.delivery_area}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer05\">\n              Agent Type<span className=\"text-danger\">*</span>\n            </label>\n            <CFormSelect\n              feedbackInvalid=\"Example invalid select feedback\"\n              onChange={handleChange}\n              value={values.type}\n              onBlur={handleBlur}\n              name=\"type\"\n            >\n              <option>Select Agent Type</option>\n              <option value=\"Freelancer\">Freelancer</option>\n              <option value=\"Employee\">Employee</option>\n            </CFormSelect>\n            <div className=\"error-container\">\n              {touched.type && errors.type ? (\n                <span className=\"validtion-error\">{errors.type}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"position-relative\">\n            <label className=\"\" htmlFor=\"validationServer05\">\n              Vehicle Type<span className=\"text-danger\">*</span>\n            </label>\n            <Select\n              options={vehicleTypeArray}\n              name=\"vehicle_type\"\n              value={vehicleTypeArray.find(\n                (option) => option.value === values.vehicle_type\n              )}\n              onChange={handleVehicleType}\n            />\n            <div className=\"error-container\">\n              {touched.vehicle_type && errors.vehicle_type ? (\n                <span className=\"validtion-error\">{errors.vehicle_type}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol sm={12} className=\"d-flex justify-content-center\">\n            <CButton type=\"submit\" color=\"info\" className=\"w-25 text-white\">\n              Submit\n            </CButton>\n          </CCol>\n        </CForm>\n      </CModalBody>\n    </CModal>\n  );\n};\n\nexport default Add;\n","import {\n  CButton,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\nimport { closeConfirmationModal, deleteAgents, setDeleteId } from \"src/features/agents/AgentSlice\";\nconst ConfirmationModel = () => {\n  const dispatch = useDispatch();\n  const { confirmMessage, deleteId,currentSTs } = useSelector((state) => state.agent);\n\n\n  const confirmButton = () => {\n    dispatch(deleteAgents({deleteId,currentSTs}));\n    dispatch(closeConfirmationModal());\n  };\n  const closeModal = () => {\n    dispatch(closeConfirmationModal());\n    dispatch(setDeleteId(null));\n  };\n  return (\n    <CModal alignment=\"center\" visible={confirmMessage}>\n      <CHeader className=\"rounded-top\">\n        <CModalTitle></CModalTitle>\n        <ImCross className=\"text-danger cursor fs-5 me-2\" onClick={closeModal} />\n      </CHeader>\n      <CModalBody className=\"confirmCardText fs-6 w-100 d-flex justify-content-center\">\n        Do you really want to delete this record?\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={closeModal}>\n          No\n        </CButton>\n        <CButton\n          color=\"info\"\n          className=\"text-white\"\n          type=\"submit\"\n          onClick={confirmButton}\n        >\n          Yes\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default ConfirmationModel;\n","import {\n  CButton,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ImCross } from \"react-icons/im\";\n// import { getAvailbleDriver } from \"src/features/availableDiver/DriverSlice\";\nimport { assignTeamsToDriver, closeAssignDriverModel } from \"src/features/agents/AgentSlice\";\nimport { getAvailbleDriver } from \"src/features/Route/RouteSlice\";\n\nconst AssignTeam = () => {\n  const dispatch = useDispatch();\n  const { assignDriverModel,driverId } = useSelector((state) => state.agent);\n  const team = useSelector((state)=>state.team.teamsList)\n  const [selectedOption, setSelectedOption] = useState(null);\n\n\n  const teamId = selectedOption?.value\n  const testArray = [];\n  const data = team?.teamList;\n  data?.forEach((item) => {\n    testArray.push({\n      value: `${item.team_name}`,\n      label: `${item.team_name}`,\n      value:item.id,\n    });\n  });\n\n\n  useEffect(() => {\n    dispatch(getAvailbleDriver());\n  }, []);\n\n  const confirmButton = () => {\n    dispatch(assignTeamsToDriver({driverId,teamId}));\n    if(teamId){\n      dispatch(closeAssignDriverModel());\n    }\n  };\n\n  const closeModal = () => {\n    dispatch(closeAssignDriverModel());\n  };\n\n  return (\n    <CModal alignment=\"center\" visible={assignDriverModel}>\n      <CHeader className=\"rounded-top\">\n        <CModalTitle>Select Team</CModalTitle>\n        <ImCross className=\"text-danger cursor fs-5 me-2\" onClick={closeModal} />\n      </CHeader>\n      <CModalBody className=\"confirmCardText fs-6 w-100 d-flex justify-content-center\">\n        <Select\n          className=\"assignDriver-dropdown\"\n          classNamePrefix=\"Select\"\n          isClearable\n          name=\"color\"\n          onChange={setSelectedOption}\n          options={testArray}\n        />\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={closeModal}>\n          No\n        </CButton>\n        <CButton\n          color=\"info\"\n          className=\"text-white\"\n          type=\"submit\"\n          onClick={confirmButton}\n        >\n          Assign\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default AssignTeam;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CContainer,\n  CFormInput,\n  CLink,\n} from \"@coreui/react\";\nimport { MdHomeWork } from \"react-icons/md\";\nimport { RiBriefcase2Fill } from \"react-icons/ri\";\nimport { HiUser } from \"react-icons/hi\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { TiBusinessCard } from \"react-icons/ti\";\nimport { NavLink, Outlet, useLocation } from \"react-router-dom\";\nimport { BsFillPlusCircleFill } from \"react-icons/bs\";\nimport { BiExport } from \"react-icons/bi\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  openAgentAddModal,\n  searchAgents,\n} from \"src/features/agents/AgentSlice\";\nimport Add from \"./modal/Add\";\nimport Spinner from \"src/spinner/Spinner\";\nimport ConfirmationModel from \"./modal/ConfirmationModel\";\nimport AssignDriver from \"./modal/AssignTeam\";\nimport { toast } from \"react-toastify\";\n\nconst Agent = () => {\n  const { agentList, isLoader, currentSTs, currentPage } = useSelector(\n    (state) => state.agent\n  );\n  const [pathLoaction, setPathLoaction] = useState(\"\");\n  const dispatch = useDispatch();\n  const noDataMessage = () => toast.error(`No Agent found in ${currentPage} `);\n\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    setPathLoaction(\"\");\n  }, [pathname]);\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        {isLoader ? <Spinner className=\"modal-spinner\" /> : null}\n        <CCardBody>\n          <CContainer className=\"d-flex justify-content-end gap-3 mb-4\">\n            {agentList?.agents?.length > 0 ? (\n              <CButton\n                color=\"info\"\n                className=\"button-size ms-3 d-flex justify-content-center align-items-center\"\n              >\n                <CLink\n                  className=\"text-decoration-none text-white\"\n                  href={`https://delivery-app.softprodigyphp.in/export_agent/${currentPage}`}\n                  download=\"filename.csv\"\n                >\n                  <BiExport className=\"me-1 button-icon\" />\n                  Export\n                </CLink>\n              </CButton>\n            ) : (\n              <CButton\n                color=\"info\"\n                className=\"button-size ms-3 d-flex justify-content-center align-items-center\"\n                onClick={() => noDataMessage()}\n              >\n                <CLink className=\"text-decoration-none text-white\">\n                  <BiExport className=\"me-1 button-icon\" />\n                  Export\n                </CLink>\n              </CButton>\n            )}\n            <CButton\n              className=\"button-size text-white d-flex justify-content-center align-items-center\"\n              color=\"info\"\n              onClick={() => dispatch(openAgentAddModal())}\n            >\n              <BsFillPlusCircleFill className=\"me-1 button-icon\" />\n              Add\n            </CButton>\n          </CContainer>\n          <CContainer className=\"d-flex justify-content-between align-items-center w-100 text-center fs-6\">\n            <CContainer className=\"agent-conatainer \">\n              {agentList ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <MdHomeWork className=\"text-dark fs-5 me-2\" />\n                    {agentList?.totalAgents}\n                  </span>\n                  <p>Total Agents</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <MdHomeWork className=\"text-dark fs-5 me-2\" />0\n                  </span>\n                  <p>Total Agents</p>\n                </>\n              )}\n            </CContainer>\n            <CContainer className=\"agent-conatainer \">\n              {agentList ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <RiBriefcase2Fill className=\"text-dark fs-5 me-2\" />\n                    {agentList?.freelancer}\n                  </span>\n                  <p>Freelancer</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <RiBriefcase2Fill className=\"text-dark fs-5 me-2\" />0\n                  </span>\n                  <p>Freelancer</p>\n                </>\n              )}\n            </CContainer>\n            <CContainer className=\"agent-conatainer \">\n              {agentList ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <HiUser className=\"text-dark fs-5 me-2\" />\n                    {agentList?.employees}\n                  </span>\n                  <p>Employees</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <HiUser className=\"text-dark fs-5 me-2\" />0\n                  </span>\n                  <p>Employees</p>\n                </>\n              )}\n            </CContainer>\n            <CContainer className=\"agent-conatainer \">\n              {agentList ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <TiBusinessCard className=\"text-dark fs-5 me-2\" />\n                    {agentList?.approvedAgents}\n                  </span>\n                  <p>Approved Agents</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <TiBusinessCard className=\"text-dark fs-5 me-2\" />0\n                  </span>\n                  <p>Approved Agents</p>\n                </>\n              )}\n            </CContainer>\n            <CContainer className=\"agent-conatainer \">\n              {agentList ? (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <FaUserCircle className=\"text-dark fs-5 me-2\" />\n                    {agentList?.unApprovedAgents}\n                  </span>\n                  <p>Unapproved Agents</p>\n                </>\n              ) : (\n                <>\n                  <span className=\"text-dark fs-6 ms-1 d-flex align-items-center justify-content-center\">\n                    <FaUserCircle className=\"text-dark fs-5 me-2\" />0\n                  </span>\n                  <p>Unapproved Agents</p>\n                </>\n              )}\n            </CContainer>\n          </CContainer>\n          <CContainer className=\"d-flex mt-5 justify-content-between align-items-center\">\n            <CContainer>\n              <NavLink\n                className={({ isActive }) =>\n                  isActive\n                    ? \"activeLink  me-4 fs-6 text-decoration-none text-black font-weight-bold\"\n                    : \"normalLink  me-4 fs-6\"\n                }\n                to=\"/dispatcher/agent/active\"\n              >\n                Active\n              </NavLink>\n              <NavLink\n                className={({ isActive }) =>\n                  isActive\n                    ? \"activeLink ms-4 fs-6 text-decoration-none text-black font-weight-bold\"\n                    : \"normalLink ms-4 fs-6\"\n                }\n                to=\"/dispatcher/agent/awaiting\"\n              >\n                Awaiting Approval\n              </NavLink>\n              <NavLink\n                className={({ isActive }) =>\n                  isActive\n                    ? \"activeLink ms-4 me-4 fs-6 text-decoration-none text-black font-weight-bold\"\n                    : \"normalLink ms-4 me-4 fs-6\"\n                }\n                to=\"/dispatcher/agent/blocked\"\n              >\n                Blocked\n              </NavLink>\n            </CContainer>\n            <CFormInput\n              type=\"search\"\n              className=\"w-50 mb-3 border border-dark\"\n              placeholder=\"Search by Agent Name...\"\n              maxLength={100}\n              value={pathLoaction}\n              onChange={(e) =>\n               { dispatch(\n                  searchAgents({ currentSTs, search: e.target.value.trim() })\n                ); setPathLoaction(e.target.value)}\n              }\n            />\n          </CContainer>\n          <Outlet></Outlet>\n        </CCardBody>\n        <Add />\n        <ConfirmationModel />\n        <AssignDriver />\n      </CCard>\n    </>\n  );\n};\n\nexport default Agent;\n","export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n"],"names":["vehicleType","useSelector","state","pricingRule","agent","agentAddModal","isLoader","currentSTs","team","teamsList","useState","setUrlPath","selectedOption","setSelectedOption","dispatch","useDispatch","userId","value","testArray","data","teamList","forEach","item","push","team_name","label","id","vehicleTypeArray","vehicleTypeData","theVehicleType","driverVehicleType","useEffect","getTeams","getVehicleType","pathname","useLocation","splitLocation","split","useFormik","initialValues","teamId","type","first_name","last_name","email","mobile","website","dob","plate_number","vehicle_type","delivery_area","enableReinitialize","validationSchema","AgentAddSchema","onSubmit","action","addAgents","status","values","handleBlur","handleChange","touched","errors","handleSubmit","setFieldValue","resetForm","today","Date","maxDate","getFullYear","getMonth","getDate","toISOString","slice","minDate","size","visible","Spinner","color","className","onClick","closeAgentAddModal","htmlFor","classNamePrefix","isClearable","name","onChange","options","md","maxLength","onBlur","international","defaultCountry","max","min","feedbackInvalid","find","option","sm","confirmMessage","deleteId","closeModal","closeConfirmationModal","setDeleteId","alignment","deleteAgents","assignDriverModel","driverId","getAvailbleDriver","closeAssignDriverModel","assignTeamsToDriver","agentList","currentPage","pathLoaction","setPathLoaction","agents","length","href","download","toast","openAgentAddModal","totalAgents","freelancer","employees","approvedAgents","unApprovedAgents","isActive","to","placeholder","e","searchAgents","search","target","trim","FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","Yup","required","matches","AutoAlloactionSchema","maxRadius","AddGeoFenceSchema","geofencing_name","location","teamName","coordinates","AddManagerSchema","AddPricingRuleSchema","geoFenceId","nullable","agentVehicle","basePrice","test","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddTeamSchema","team_tag","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","includes","AddMerchantSchema","pincode","address","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate"],"sourceRoot":""}