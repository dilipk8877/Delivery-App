{"version":3,"file":"static/js/8340.0b566206.chunk.js","mappings":"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","sources":["utils/HandlerCommonFile.js","validateSchema/Schema.js","views/ReactTable/ReactTable.js","views/mobileBanner/modal/Add.js","views/mobileBanner/modal/ConfirmationModel.js","views/mobileBanner/modal/UpdateBanner.js","views/mobileBanner/MobileBanner.js"],"sourcesContent":["export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n","import React, { useEffect } from \"react\";\nimport {\n  useSortBy,\n  useTable,\n  usePagination,\n  useGlobalFilter,\n} from \"react-table\";\nimport { BsArrowDown, BsArrowUp } from \"react-icons/bs\";\nimport { useSelector } from \"react-redux\";\n\nconst ReactTable = ({ data, columns }) => {\n  const {searchField} = useSelector((state)=>state.users)\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: false,\n      initialState: { pageIndex: 0, pageSize: 10 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    state,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    pageCount,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  useEffect(()=>{\n    gotoPage(0)\n  },[searchField])\n\n  useEffect(()=>{\n    if(data?.length % 10 ===0){\n      previousPage()\n    }\n  },[data])\n\n  useEffect(() => {\n    window.scrollTo({top: 0, left: 0, behavior: 'instant'});\n  }, [pageIndex]);\n  \n  return (\n    <>\n      <div>\n        <table {...getTableProps()} className=\"category-table\">\n          <thead className=\"category-table-head\">\n            {headerGroups.map((headerGroups, index) => (\n              <tr {...headerGroups.getHeaderGroupProps()} key={index}>\n                {headerGroups.headers.map((columns,index) => (\n                  <th key={index}>\n                    {columns.render(\"Header\")}\n                    <span {...columns.getHeaderProps(columns.getSortByToggleProps())}>\n                    {!columns.disableSortBy &&\n                      (columns.isSorted ? (\n                        columns.isSortedDesc ? (\n                          <>\n                          <BsArrowDown className=\"arrow-down\" />\n                          <BsArrowUp />\n                          </>\n                        ) : (\n                          <>\n                          <BsArrowDown />\n                          <BsArrowUp className=\"arrow-down\" />\n                          </>\n                        )\n                      ) : (\n                        <>\n                          <BsArrowUp />\n                          <BsArrowDown />\n                        </>\n                      ))}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"category-table-body\">\n            {data.length !== 0 ? (\n              page.map((row,index) => {\n                prepareRow(row);\n                return (\n                  <tr className=\"th-table\" {...row.getRowProps()} key={index}>\n                    {row.cells.map((cell, index) => {\n                      return (\n                        <th className=\"th-table-data\" {...cell.getCellProps()} key={index}>{cell.render(\"Cell\")}</th>\n                      );\n                    })}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan={columns.length}> No record found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {data?.length > 10 ? (\n        <div className=\"pagination-button\">\n          <button onClick={() => gotoPage(0)} disabled={pageIndex === 0}>\n          {'<<'}\n        </button>{' '}\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n           {'<'}\n          </button>\n          <strong className=\"me-2\">\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{\" \"}\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\n            {'>'}\n          </button>\n          <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={pageIndex === pageCount - 1}\n        >\n          {'>>'}\n        </button>{' '}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default ReactTable;\n","import {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormSelect,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { ImCross } from \"react-icons/im\";\nimport Switch from \"@mui/material/Switch\";\nimport {\n  addMobileBanner,\n  closeAddModal,\n  updateMobileBanner,\n} from \"src/features/mobileBanner/MobileBannerSlice\";\nimport { useEffect, useState } from \"react\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport { AddMobileBanner } from \"src/validateSchema/Schema\";\nconst Add = () => {\n  const { addModal, isLoader, toggleStatus, prefieldValue } = useSelector(\n    (state) => state.mobileBanner\n  );\n  const [startDateValue, setStateDateValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    dispatch(closeAddModal());\n    resetForm();\n  };\n\n  const {\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n    touched,\n    errors,\n    resetForm,\n  } = useFormik({\n    initialValues: {\n      name: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      bannerImages: \"\",\n      assignTo: \"abcd\",\n    },\n    enableReinitialize: true,\n    validationSchema: AddMobileBanner,\n    onSubmit: (data,action) => {\n      // {\n      //   toggleStatus\n      //     ? dispatch(addMobileBanner(data))\n      //     : dispatch(updateMobileBanner({ data, id: prefieldValue?.id }));\n      // }\n      dispatch(addMobileBanner({data,action}));\n    },\n  });\n  const disableStartDate = () => {\n    const today = new Date();\n    const dd = String(today.getDate()).padStart(2, \"0\");\n    const mm = String(today.getMonth() + 1).padStart(2, \"0\");\n    const yyyy = today.getFullYear();\n    return yyyy + \"-\" + mm + \"-\" + dd;\n  };\n\n  const splitdate = startDateValue.split(\"-\");\n\n  const disableEndDate = () => {\n    const today = new Date();\n    const dd = String(splitdate[2]).padStart(2, \"0\");\n    const mm = String(splitdate[1]).padStart(2, \"0\");\n    const yyyy = today.getFullYear();\n    return yyyy + \"-\" + mm + \"-\" + dd;\n  };\n\n  return (\n    <CModal size=\"lg\" scrollable alignment=\"center\" visible={addModal}>\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CHeader className=\"rounded-top\">\n        <CModalTitle>Add Mobile Banner</CModalTitle>\n        {/* {toggleStatus ? (\n          <CModalTitle>Add Mobile Banner</CModalTitle>\n        ) : (\n          <CModalTitle>Update Mobile Banner</CModalTitle>\n        )} */}\n\n        <ImCross\n          className=\"text-danger cursor fs-5 me-2\"\n          onClick={handleClose}\n        />\n      </CHeader>\n      <CModalBody className=\"\">\n        <CForm className=\"mt-2\" onSubmit={handleSubmit}>\n          <CRow>\n            <CCol md={6}>\n              <CCol md={12} className=\"mt-2 p-0 \">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Upload Mobile Banner Image\n                  {toggleStatus ? <span className=\"text-danger\">*</span> : null}\n                </label>\n                <CFormInput\n                  type=\"file\"\n                  accept=\".png, .jpg, .jpeg\"\n                  name=\"bannerImages\"\n                  onBlur={handleBlur}\n                  onChange={(e) => {\n                    setFieldValue(\"bannerImages\", e.currentTarget.files[0]);\n                  }}\n                />\n                <div className=\"error-container\">\n                  {touched.bannerImages && errors.bannerImages ? (\n                    <span className=\"validtion-error\">\n                      {errors.bannerImages}\n                    </span>\n                  ) : null}\n                </div>\n              </CCol>\n            </CCol>\n            <CCol md={6} className=\"mt-2\">\n              <label className=\"\" htmlFor=\"validationServer01\">\n                Name<span className=\"text-danger\">*</span>\n              </label>\n              <CFormInput\n                type=\"text\"\n                name=\"name\"\n                maxLength={70}\n                value={values.name}\n                onBlur={handleBlur}\n                onChange={handleChange}\n              />\n              <div className=\"error-container\">\n                {touched.name && errors.name ? (\n                  <span className=\"validtion-error\">{errors.name}</span>\n                ) : null}\n              </div>\n            </CCol>\n            <CCol md={6} className=\"mt-2\">\n              <label className=\"\" htmlFor=\"validationServer01\">\n                Start Date<span className=\"text-danger\">*</span>\n              </label>\n              <CFormInput\n                type=\"date\"\n                name=\"startDate\"\n                min={disableStartDate()}\n                value={values.startDate}\n                onChange={(e) => {\n                  setFieldValue(\"startDate\", e.target.value);\n                  setStateDateValue(e.target.value);\n                }}\n                onBlur={handleBlur}\n              />\n              <div className=\"error-container\">\n                {touched.startDate && errors.startDate ? (\n                  <span className=\"validtion-error\">{errors.startDate}</span>\n                ) : null}\n              </div>\n            </CCol>\n            <CCol md={6} className=\"mt-2\">\n              <label className=\"\" htmlFor=\"validationServer01\">\n                End Date<span className=\"text-danger\">*</span>\n              </label>\n              <CFormInput\n                type=\"date\"\n                name=\"endDate\"\n                min={disableEndDate()}\n                value={values.endDate}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              <div className=\"error-container\">\n                {touched.endDate && errors.endDate ? (\n                  <span className=\"validtion-error\">{errors.endDate}</span>\n                ) : null}\n              </div>\n            </CCol>\n            <CCol md={12} className=\"d-flex justify-content-center\">\n              {/* {toggleStatus ? (\n                <CButton\n                  type=\"submit\"\n                  color=\"info\"\n                  className=\"w-25 mt-3 text-white\"\n                >\n                  Submit\n                </CButton>\n              ) : (\n                <CButton\n                  type=\"submit\"\n                  color=\"info\"\n                  className=\"w-25 mt-3 text-white\"\n                >\n                  Update\n                </CButton>\n              )} */}\n              <CButton\n                type=\"submit\"\n                color=\"info\"\n                className=\"w-25 mt-3 text-white\"\n              >\n                Submit\n              </CButton>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n    </CModal>\n  );\n};\n\nexport default Add;\n","import {\n  CButton,\n  CHeader,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ImCross } from \"react-icons/im\";\nimport { closeConfirmMessage, deleteMobileBanner, setDeleteID } from \"src/features/mobileBanner/MobileBannerSlice\";\nconst ConfirmationModel = () => {\n  const dispatch = useDispatch();\n  const { confirmMessage, deleteId } = useSelector((state) => state.mobileBanner);\n\n\n  const confirmButton = () => {\n    dispatch(deleteMobileBanner(deleteId));\n    dispatch(closeConfirmMessage());\n  };\n  const closeModal = () => {\n    dispatch(closeConfirmMessage());\n    dispatch(setDeleteID(null));\n  };\n  return (\n    <CModal alignment=\"center\" visible={confirmMessage}>\n      <CHeader className=\"rounded-top\">\n        <CModalTitle></CModalTitle>\n        <ImCross className=\"text-danger cursor fs-5 me-2\" onClick={closeModal} />\n      </CHeader>\n      <CModalBody className=\"confirmCardText fs-6 w-100 d-flex justify-content-center\">\n        Do you really want to delete this record?\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={closeModal}>\n          No\n        </CButton>\n        <CButton\n          color=\"info\"\n          className=\"text-white\"\n          type=\"submit\"\n          onClick={confirmButton}\n        >\n          Yes\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n};\n\nexport default ConfirmationModel;\n","import {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormSelect,\n  CHeader,\n  CImage,\n  CModal,\n  CModalBody,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useFormik } from \"formik\";\nimport { ImCross } from \"react-icons/im\";\n\nimport {\n  closeUpdateModal,\n  updateMobileBanner,\n} from \"src/features/mobileBanner/MobileBannerSlice\";\nimport { useEffect, useState } from \"react\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport { UpdateMobileBanner } from \"src/validateSchema/Schema\";\n\nconst UpdateBanner = () => {\n  const { updateModal, isLoader, prefieldValue } = useSelector(\n    (state) => state.mobileBanner\n  );\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [bannerUploadImage, setBannerUploadImage] = useState();\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    dispatch(closeUpdateModal());\n    resetForm();\n  };\n\n  const {\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n    touched,\n    errors,\n    resetForm,\n  } = useFormik({\n    initialValues: {\n      name: prefieldValue?.name ? prefieldValue?.name : \"\",\n      startDate: prefieldValue?.startDate ? prefieldValue?.startDate : \"\",\n      endDate: prefieldValue?.endDate ? prefieldValue?.endDate : \"\",\n      bannerImages: \"\",\n      assignTo: \"abcd\",\n    },\n    enableReinitialize: true,\n    validationSchema: UpdateMobileBanner,\n    onSubmit: (data) => {\n      dispatch(updateMobileBanner({ data, id: prefieldValue?.id }));\n    },\n  });\n\n  \n\n  const handleStartDateChange = (event) => {\n    setStartDate(event.target.value);\n    setFieldValue(\"startDate\", event.target.value);\n  };\n\n  const handleEndDateChange = (event) => {\n    setEndDate(event.target.value);\n    setFieldValue(\"endDate\", event.target.value);\n  };\n    const disableStartDate = () => {\n      const today = new Date();\n      const dd = String(today.getDate()).padStart(2, \"0\");\n      const mm = String(today.getMonth() + 1).padStart(2, \"0\");\n      const yyyy = today.getFullYear();\n      return yyyy + \"-\" + mm + \"-\" + dd;\n    };\n\n\n  return (\n    <CModal size=\"lg\" scrollable alignment=\"center\" visible={updateModal}>\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CHeader className=\"rounded-top\">\n        <CModalTitle>Update Mobile Banner</CModalTitle>\n        <ImCross className=\"text-danger fs-5 me-2\" onClick={handleClose} />\n      </CHeader>\n      <CModalBody className=\"\">\n        <CForm className=\"mt-2\" onSubmit={handleSubmit}>\n          <CRow>\n            <CCol md={6}>\n              {prefieldValue && (\n                <CImage\n                  src={\n                    bannerUploadImage\n                      ? bannerUploadImage\n                      : `https://delivery-app.softprodigyphp.in/upload/${prefieldValue?.bannerImages[0]?.filename}`\n                  }\n                  alt=\"bannerImage\"\n                  width={350}\n                  height={280}\n                  className=\"ms-4 mt-2\"\n                />\n              )}\n            </CCol>\n            <CCol md={6}>\n              <CCol md={12}>\n                <CCol md={12} className=\"p-0 \">\n                  <label className=\"\" htmlFor=\"validationServer01\">\n                    Upload Mobile Banner Image\n                  </label>\n                  <CFormInput\n                    type=\"file\"\n                    accept=\".png, .jpg, .jpeg\"\n                    name=\"bannerImages\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      setBannerUploadImage(\n                        URL.createObjectURL(e.target.files[0])\n                      );\n                      setFieldValue(\"bannerImages\", e.currentTarget.files[0]);\n                    }}\n                  />{\" \"}\n                  <div className=\"error-container\">\n                    {touched.bannerImages && errors.bannerImages ? (\n                      <span className=\"validtion-error\">\n                        {errors.bannerImages}\n                      </span>\n                    ) : null}\n                  </div>\n                </CCol>\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Name<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  name=\"name\"\n                  maxLength={70}\n                  value={values.name}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                />{\" \"}\n                <div className=\"error-container\">\n                  {touched.name && errors.name ? (\n                    <span className=\"validtion-error\">{errors.name}</span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Start Date<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"date\"\n                  id=\"start-date\"\n                  value={startDate || values.startDate}\n                  onChange={handleStartDateChange}\n                  min={disableStartDate()}\n                />{\" \"}\n                <div className=\"error-container\">\n                  {touched.startDate && errors.startDate ? (\n                    <span className=\"validtion-error\">{errors.startDate}</span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  End Date<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"date\"\n                  id=\"end-date\"\n                  value={endDate || values.endDate}\n                  onChange={handleEndDateChange}\n                  min={startDate}\n                />{\" \"}\n                <div className=\"error-container\">\n                  {touched.endDate && errors.endDate ? (\n                    <span className=\"validtion-error\">{errors.endDate}</span>\n                  ) : null}\n                </div>\n              </CCol>\n            </CCol>\n\n            <CCol md={12} className=\"d-flex justify-content-center\">\n              <CButton\n                type=\"submit\"\n                color=\"info\"\n                className=\"w-25 mt-3 text-white\"\n              >\n                Update\n              </CButton>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CModalBody>\n    </CModal>\n  );\n};\n\nexport default UpdateBanner;\n","import React, { useEffect, useMemo } from \"react\";\nimport { CButton, CCard, CCardBody, CContainer } from \"@coreui/react\";\nimport { FaCircle, FaEdit, FaTrash } from \"react-icons/fa\";\nimport Spinner from \"src/spinner/Spinner\";\nimport ReactTable from \"../ReactTable/ReactTable\";\nimport { BsFillPlusCircleFill } from \"react-icons/bs\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getMobileBanner,\n  openAddModal,\n  openConfirmMessage,\n  openUpdateModal,\n  setDeleteID,\n  setPrefieldValue,\n  setToggleStatus,\n} from \"src/features/mobileBanner/MobileBannerSlice\";\nimport Add from \"./modal/Add\";\nimport ConfirmationModel from \"./modal/ConfirmationModel\";\nimport moment from \"moment\";\nimport UpdateBanner from \"./modal/UpdateBanner\";\n\nconst MobileBanner = () => {\n  const { mobileBannerList, isLoader } = useSelector(\n    (state) => state.mobileBanner\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getMobileBanner());\n  }, []);\n\n  const handleDelete = (id) => {\n    dispatch(openConfirmMessage());\n    dispatch(setDeleteID(id));\n  };\n\n  const handleEdit = (d) => {\n    dispatch(openUpdateModal());\n    // dispatch(openAddModal());\n    dispatch(setPrefieldValue(d));\n    dispatch(setToggleStatus(false));\n  };\n\n  const handleAddBanner = () => {\n    dispatch(openAddModal());\n    dispatch(setToggleStatus(true));\n    dispatch(setPrefieldValue(null));\n  };\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Image\",\n        disableSortBy: true,\n        accessor: (d) => {\n          return (\n            <img\n              src={`https://delivery-app.softprodigyphp.in/upload/${d.bannerImages[0].filename}`}\n              alt=\"bannerImg\"\n              width={200}\n              height={120}\n              className=\"mobileBannerImage\"\n            />\n          );\n        },\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n      },\n      {\n        Header: \"Duration\",\n        accessor: (d) => {\n          return (\n            <>\n              {d.name === \"Default\" ? null : (\n                <span>\n                  {moment(d.startDate).local().format(\"DD-MM-YYYY\")} -{\" \"}\n                  {moment(d.endDate).local().format(\"DD-MM-YYYY\")}\n                </span>\n              )}\n            </>\n          );\n        },\n      },\n      {\n        Header: \"Status\",\n        disableSortBy: true,\n        accessor: (d) => {\n          return (\n            <>\n              {d.name === \"Default\" ? null : (\n                <span>\n                  {\n                    <FaCircle\n                      className={\n                        d.status === true ? \"driver-online\" : \"driver-offline\"\n                      }\n                    />\n                  }\n                </span>\n              )}\n            </>\n          );\n        },\n      },\n      {\n        Header: \"Action\",\n        disableSortBy: true,\n        accessor: (d) => {\n          return (\n            <>\n              {d.name === \"Default\" ? null : (\n                <CContainer className=\"d-flex justify-content-start align-items-center ps-0 gap-2\">\n                  <FaEdit\n                    className=\"cursor\"\n                    title=\"Update Banner\"\n                    onClick={() => handleEdit(d)}\n                  />\n                  <FaTrash\n                    className=\"cursor\"\n                    title=\"Delete Banner\"\n                    onClick={() => handleDelete(d.id)}\n                  />\n                </CContainer>\n              )}\n            </>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        {isLoader ? (\n          <Spinner color=\"primary\" className=\"modal-spinner\" />\n        ) : null}\n        <CCardBody>\n          <CContainer className=\"d-flex justify-content-end gap-3 mb-4\">\n            <CButton\n              className=\"button-size d-flex justify-content-center align-items-center text-white\"\n              color=\"info\"\n              onClick={() => handleAddBanner()}\n            >\n              <BsFillPlusCircleFill className=\"me-1 button-icon\" />\n              Add\n            </CButton>\n          </CContainer>\n          <CCard className=\"mt-3\">\n            {true && (\n              <ReactTable\n                data={mobileBannerList?.allBanners || []}\n                columns={columns}\n              />\n            )}\n          </CCard>\n        </CCardBody>\n      </CCard>\n      <Add />\n      <UpdateBanner />\n      <ConfirmationModel />\n    </>\n  );\n};\n\nexport default MobileBanner;\n"],"names":["FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","AgentAddSchema","Yup","teamId","required","type","first_name","trim","matches","last_name","email","mobile","min","max","website","dob","plate_number","vehicle_type","delivery_area","AutoAlloactionSchema","maxRadius","AddGeoFenceSchema","geofencing_name","location","teamName","coordinates","AddManagerSchema","status","AddPricingRuleSchema","name","geoFenceId","nullable","agentVehicle","basePrice","test","value","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddTeamSchema","team_name","team_tag","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","includes","AddMerchantSchema","pincode","address","state","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","size","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate","data","columns","useSelector","users","searchField","tableInstance","useTable","autoResetPage","initialState","pageIndex","pageSize","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","pageCount","useEffect","length","window","scrollTo","top","left","behavior","className","map","index","getHeaderGroupProps","key","headers","render","getHeaderProps","getSortByToggleProps","disableSortBy","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","colSpan","onClick","disabled","mobileBanner","addModal","isLoader","toggleStatus","prefieldValue","useState","startDateValue","setStateDateValue","dispatch","useDispatch","useFormik","initialValues","assignTo","enableReinitialize","validationSchema","onSubmit","action","addMobileBanner","values","handleBlur","handleChange","handleSubmit","setFieldValue","touched","errors","resetForm","splitdate","split","scrollable","alignment","visible","Spinner","color","closeAddModal","md","htmlFor","accept","onBlur","onChange","e","currentTarget","files","maxLength","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","disableStartDate","target","disableEndDate","confirmMessage","deleteId","closeModal","closeConfirmMessage","setDeleteID","deleteMobileBanner","updateModal","setStartDate","setEndDate","bannerUploadImage","setBannerUploadImage","updateMobileBanner","id","closeUpdateModal","src","filename","alt","width","height","URL","createObjectURL","event","mobileBannerList","getMobileBanner","useMemo","Header","accessor","d","moment","local","format","title","openUpdateModal","setPrefieldValue","setToggleStatus","handleEdit","openConfirmMessage","openAddModal","ReactTable","allBanners"],"sourceRoot":""}