{"version":3,"file":"static/js/3346.b8e74f55.chunk.js","mappings":"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","sources":["dispatcherPanel/views/Manager/modal/AddManager.js","utils/HandlerCommonFile.js","validateSchema/Schema.js"],"sourcesContent":["import { CButton, CCard, CCol, CForm, CFormInput, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport Switch from \"@mui/material/Switch\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PhoneInput from \"react-phone-number-input\";\n\nimport {\n  addSub_manager,\n  getPermission,\n} from \"src/features/manageManager/ManagerSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { AddManagerSchema } from \"src/validateSchema/Schema\";\nconst AddManager = () => {\n  const { permission, isLoader } = useSelector((state) => state.manager);\n  const partitionValue = Math.ceil(permission?.permission?.length / 2);\n  const [perm, setPermission] = useState([]);\n\n  const navigate = useNavigate();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPermission());\n  }, []);\n\n\n  const permissionHandler = (e) => {\n    if(perm.includes(e)===false){\n      setPermission((prev) => [...prev, e]);\n    }else{\n      setPermission((prev) => prev.filter((item) => item!== e));\n    }\n  };\n\n  const options = [\n    { value: \"active\", label: \"Active\" },\n    { value: \"inactive\", label: \"InActive\" },\n  ];\n\n  const {\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    setFieldValue,\n    errors,\n    touched,\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      mobile: \"\",\n      status: \"\",\n      entity_type: [],\n    },\n    validationSchema: AddManagerSchema,\n    onSubmit: (data, action) => {\n      dispatch(addSub_manager({ data, action, navigate }));\n    },\n  });\n\n  return (\n    <CCard className=\"mb-4\">\n      {isLoader ? <Spinner color=\"primary\" className=\"modal-spinner\" /> : null}\n      <CForm className=\"p-3\" onSubmit={handleSubmit}>\n        <CRow>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              First Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              name=\"first_name\"\n              maxLength={30}\n              value={values.first_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.first_name && errors.first_name ? (\n                <span className=\"validtion-error\">{errors.first_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Last Name<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              name=\"last_name\"\n              maxLength={30}\n              value={values.last_name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.last_name && errors.last_name ? (\n                <span className=\"validtion-error\">{errors.last_name}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Email<span className=\"text-danger\">*</span>\n            </label>\n            <CFormInput\n              type=\"text\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            <div className=\"error-container\">\n              {touched.email && errors.email ? (\n                <span className=\"validtion-error\">{errors.email}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Phone Number<span className=\"text-danger\">*</span>\n            </label>\n            {/* <CFormInput\n              type=\"text\"\n              name=\"mobile\"\n              maxLength={10}\n              value={values.mobile}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            /> */}\n            <PhoneInput\n              international\n              defaultCountry=\"IN\"\n              id=\"validationServer03\"\n              name=\"mobile\"\n              value={values.mobile}\n              onChange={(value) => setFieldValue(\"mobile\", value)}\n              onBlur={handleBlur}\n              // style={{outerHeight:\"100px\"}}\n            />\n            <div className=\"error-container\">\n              {touched.mobile && errors.mobile ? (\n                <span className=\"validtion-error\">{errors.mobile}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={6} className=\"mt-3\">\n            <label className=\"\" htmlFor=\"validationServer01\">\n              Status<span className=\"text-danger\">*</span>\n            </label>\n            <Select\n              options={options}\n              value={options.find((option) => option.value === values.status)}\n              onChange={(option) => setFieldValue(\"status\", option.value)}\n            />\n            <div className=\"error-container\">\n              {touched.status && errors.status ? (\n                <span className=\"validtion-error\">{errors.status}</span>\n              ) : null}\n            </div>\n          </CCol>\n          <CCol md={12} className=\"mt-4\">\n            <CRow>\n              <CCol md={6}>\n                <CRow className=\"d-flex align-items-center\">\n                  <CCol md={9} className=\"addmanager-status\">\n                    Permission\n                  </CCol>\n                  <CCol md={3} className=\"addmanager-status\">\n                    Status\n                  </CCol>\n                  {permission?.permission\n                    ?.slice(0, partitionValue)\n                    .map((list, index) => {\n                      return (\n                        <CRow key={index} className=\"d-flex align-items-center\">\n                        <CCol md={1} className=\"fs-3\">•</CCol>\n                          <CCol md={8}>{list.entity_name}</CCol>\n                          <CCol md={3}>\n                            <Switch\n                              name={list.id}\n                              onChange={(e) =>\n                                permissionHandler(e.target.name)\n                              }\n                            />\n                          </CCol>\n                        </CRow>\n                      );\n                    })}\n                </CRow>\n              </CCol>\n              <CCol md={6}>\n                <CRow className=\"d-flex align-items-center\">\n                  <CCol md={9} className=\"addmanager-status\">\n                    Permission\n                  </CCol>\n                  <CCol md={3} className=\"addmanager-status\">\n                    Status\n                  </CCol>\n                  {permission?.permission\n                    ?.slice(partitionValue)\n                    .map((list, index) => {\n                      return (\n                        <CRow key={index} className=\"d-flex align-items-center\">\n                        <CCol md={1} className=\"fs-3\">•</CCol>\n                          <CCol md={8}>{list.entity_name}</CCol>\n                          <CCol md={3}>\n                            <Switch\n                              name={list.id}\n                              onChange={(e) =>\n                                permissionHandler(e.target.name)\n                              }\n                            />\n                          </CCol>\n                        </CRow>\n                      );\n                    })}\n                </CRow>\n              </CCol>\n            </CRow>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol md={7} className=\"d-flex justify-content-end mt-4\">\n            <CButton\n              type=\"submit\"\n              color=\"info\"\n              className=\"w-25 text-light\"\n              onClick={() => {\n                setFieldValue(\"entity_type\", perm);\n              }}\n            >\n              Submit\n            </CButton>\n          </CCol>\n        </CRow>\n      </CForm>\n    </CCard>\n  );\n};\n\nexport default AddManager;\n","export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n"],"names":["useSelector","state","manager","permission","isLoader","partitionValue","Math","ceil","length","useState","perm","setPermission","navigate","useNavigate","dispatch","useDispatch","useEffect","getPermission","permissionHandler","e","includes","prev","filter","item","options","value","label","useFormik","enableReinitialize","initialValues","first_name","last_name","email","mobile","status","entity_type","validationSchema","AddManagerSchema","onSubmit","data","action","addSub_manager","values","handleBlur","handleChange","handleSubmit","setFieldValue","errors","touched","className","color","md","htmlFor","type","name","maxLength","onChange","onBlur","international","defaultCountry","id","find","option","slice","map","list","index","entity_name","target","onClick","FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","AgentAddSchema","Yup","teamId","required","trim","matches","min","max","website","dob","plate_number","vehicle_type","delivery_area","AutoAlloactionSchema","maxRadius","AddGeoFenceSchema","geofencing_name","location","teamName","coordinates","AddPricingRuleSchema","geoFenceId","nullable","agentVehicle","basePrice","test","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddTeamSchema","team_name","team_tag","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","AddMerchantSchema","pincode","address","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","size","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate"],"sourceRoot":""}