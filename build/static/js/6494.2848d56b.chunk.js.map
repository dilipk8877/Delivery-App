{"version":3,"file":"static/js/6494.2848d56b.chunk.js","mappings":"6UA+MA,UAxLoB,WAAO,IAAD,EACxB,GAA6BA,EAAAA,EAAAA,UAAS,IAAtC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,MAAjB,IAAtCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SACfC,EAAQ,UAAGF,EAAY,UAAf,aAAG,EAAgBG,QAC3BC,GAAOP,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMM,KAAKC,SAAtB,IACzB,GAA4CX,EAAAA,EAAAA,UAAS,MAArD,eAAOY,EAAP,KAAuBC,EAAvB,KACA,GAA4Bb,EAAAA,EAAAA,UAAS,CAAC,UAAW,YAAjD,eAAOc,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,EAAQ,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAgBS,MAC3BC,EAAY,GACZC,EAAI,OAAGb,QAAH,IAAGA,OAAH,EAAGA,EAAMc,SACf,OAAJD,QAAI,IAAJA,GAAAA,EAAME,SAAQ,SAACC,GACbJ,EAAUK,MAAV,QACEC,MAAM,GAAD,OAAKF,EAAKG,WACfR,MAAM,GAAD,OAAKK,EAAKG,YAFjB,QAGSH,EAAKI,IAEf,KAEDC,EAAAA,EAAAA,YAAU,WACRb,GAASc,EAAAA,EAAAA,MACV,GAAE,KACHD,EAAAA,EAAAA,YAAU,WACRE,QAAQC,IAAIpB,EACb,GAAE,CAACA,IACJ,OASIqB,EAAAA,EAAAA,IAAU,CACZC,cAAe,CACbC,gBAAiB,GACjBC,YAAa,GACbC,SAAUtC,EACVmB,SAAUA,EACVd,YAAaE,GAGfgC,iBAAkBC,EAAAA,GAClBC,SAAS,WAAD,8BAAE,WAAOnB,EAAP,kFAAeoB,UAAf,kBAEAzB,GACJ0B,EAAAA,EAAAA,IAAY,CACVP,gBAAiBd,EAAKc,gBACtBC,YAAaf,EAAKe,YAClBC,SAAUtC,EACVK,YAAaE,EACbY,SAAUA,EACVJ,SAAAA,KAEF6B,SAXI,sDAaNZ,QAAQC,IAAR,MAbM,wDAAF,qDAAC,KAlBTY,EADF,EACEA,OACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,aACAC,EALF,EAKEA,OACAC,EANF,EAMEA,QACAC,EAPF,EAOEA,cAPF,EAQET,UAmCF,OANAZ,EAAAA,EAAAA,YAAU,WACRqB,EAAc,WAAYhC,GAC1BgC,EAAc,WAAYnD,GAC1BmD,EAAc,cAAe5C,EAC9B,GAAE,CAACY,EAAUnB,EAASO,KAGrB,UAAC,KAAD,CAAO6C,UAAU,OAAjB,UACG9C,GAAW,SAAC,IAAD,CAAS8C,UAAU,kBAAqB,MACpD,SAAC,KAAD,WACE,SAAC,KAAD,CAAOX,SAAUO,EAAjB,UACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAMK,GAAI,EAAV,WACE,UAAC,KAAD,CAAMA,GAAI,GAAID,UAAU,OAAxB,WACE,mBAAOA,UAAU,GAAGE,QAAQ,qBAA5B,yBACa,iBAAMF,UAAU,cAAhB,mBAEb,SAAC,KAAD,CACEA,UAAU,uBACVG,gBAAgB,SAChBC,aAAW,EACXC,KAAK,WACLC,SAAU9C,EACV+C,QAAStC,EACTuC,OAAQd,KAEV,gBAAKM,UAAU,kBAAf,SACGF,EAAQ/B,UAAY8B,EAAO9B,UAC1B,iBAAMiC,UAAU,kBAAhB,SAAmCH,EAAO9B,WACxC,WAGR,UAAC,KAAD,CAAMkC,GAAI,GAAID,UAAU,OAAxB,WACE,mBAAOA,UAAU,GAAGE,QAAQ,qBAA5B,sBACU,iBAAMF,UAAU,cAAhB,mBAEV,SAAC,IAAD,CACEnD,UAAWA,EACXD,QAASA,EACTc,UAAWA,KAEb,gBAAKsC,UAAU,kBAAf,SACGF,EAAQZ,UAAYW,EAAOX,UAC1B,iBAAMc,UAAU,kBAAhB,SAAmCH,EAAOX,WACxC,WAIR,UAAC,KAAD,CAAMe,GAAI,GAAID,UAAU,OAAxB,WACE,mBAAOA,UAAU,GAAGE,QAAQ,qBAA5B,2BACe,iBAAMF,UAAU,cAAhB,mBAEf,SAAC,KAAD,CACES,KAAK,OACLhC,GAAG,qBACH4B,KAAK,kBACLL,UAAU,8BACVzB,MAAOkB,EAAOT,gBACdsB,SAAUX,EACVa,OAAQd,KAEV,gBAAKM,UAAU,kBAAf,SACGF,EAAQd,iBAAmBa,EAAOb,iBACjC,iBAAMgB,UAAU,kBAAhB,SACGH,EAAOb,kBAER,WAGR,UAAC,KAAD,CAAMiB,GAAI,GAAID,UAAU,OAAxB,WACE,mBAAOA,UAAU,GAAGE,QAAQ,qBAA5B,wBACc,KACZ,iBAAMQ,MAAO,CAAEC,SAAU,QAAzB,6BAEF,SAAC,KAAD,CACElC,GAAG,qBACH4B,KAAK,cACLL,UAAU,8BACVzB,MAAOkB,EAAOR,YACdqB,SAAUX,EACVa,OAAQd,QAGZ,UAAC,KAAD,CACEO,GAAI,GACJD,UAAU,4CAFZ,WAIE,SAAC,KAAD,CACEY,MAAM,YACNZ,UAAU,kBACVa,QAAS,kBAAMlD,EAAS,uBAAf,EAHX,qBAOA,SAAC,KAAD,CAAS8C,KAAK,SAASG,MAAM,OAAOZ,UAAU,kBAA9C,2BAKJ,SAAC,KAAD,CAAMC,GAAI,EAAV,UAEE,iBAAKD,UAAU,OAAf,WACE,iBAAMU,MAAO,CAAEI,WAAY,QAA3B,UACE,gBAAKd,UAAU,kBAAf,SACGF,EAAQ7C,aAAe4C,EAAO5C,aAC7B,iBAAM+C,UAAU,kBAAhB,SACGH,EAAO5C,cAER,UAGR,SAAC,IAAD,CAAYQ,OAAQA,kBAQnC,C,wGC5ID,IA1DyB,SAAC,GAAiD,IAA/CZ,EAA8C,EAA9CA,UAAWD,EAAmC,EAAnCA,QAASc,EAA0B,EAA1BA,UAAWqD,EAAe,EAAfA,SAEnDC,EAAY,yCAAG,WAAOzC,GAAP,mGACG0C,EAAAA,EAAAA,IAAiB1C,GADpB,cACb2C,EADa,iBAEFC,EAAAA,EAAAA,IAAUD,EAAQ,IAFhB,OAEbE,EAFa,OAGnBvE,EAAU0B,GACJ8C,EAJa,OAIPD,QAJO,IAIPA,OAJO,EAIPA,EAAIC,IACVC,EALa,OAKPF,QALO,IAKPA,OALO,EAKPA,EAAIE,IAChB5D,EAAU,CAAC2D,EAAKC,IANG,4CAAH,sDAQlB,OACE,+BACE,SAAC,KAAD,CACE/C,MAAO3B,EACP0D,SAAUzD,EACV0E,SAAUP,EAHZ,SAKG,YAAsE,IAAnEQ,EAAkE,EAAlEA,cAAeC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,uBAAwBC,EAAc,EAAdA,QACtD,OACE,4BACE,SAAC,MAAD,kBACMH,EAAc,CAChBI,YAAa,oBACb5B,UAAW,uCAHf,IAKEA,UAAU,8BACVe,cAAuBc,IAAbd,MAEZ,iBAAKf,UAAU,kCAAf,UACG2B,IAAW,wCACXF,EAAYK,KAAI,SAACC,GAChB,IAAM/B,EAAY+B,EAAWC,OACzB,0BACA,kBAEEtB,EAAQqB,EAAWC,OACrB,CAAEC,gBAAiB,UAAWC,OAAQ,WACtC,CAAED,gBAAiB,UAAWC,OAAQ,WAC1C,OACE,kCACMR,EAAuBK,EAAY,CACrC/B,UAAAA,EACAU,MAAAA,KAHJ,cAME,0BAAOqB,EAAW9C,gBAGvB,SAIR,KAIR,C,oLCvDD,SAASkD,EAAT,GAAqC,IAAX1E,EAAU,EAAVA,OAGxB,OAFY2E,EAAAA,EAAAA,MACRC,MAAM5E,EAAO,IACV,IACR,CAyED,IAxEmB,SAAC,GAA8B,IAA5BA,EAA2B,EAA3BA,OAAO6E,EAAoB,EAApBA,cAC3B,GAAkC3F,EAAAA,EAAAA,UAAS,IAA3C,eAAO4F,EAAP,KAAkBC,EAAlB,KACM3E,GAAWC,EAAAA,EAAAA,OAEjBY,EAAAA,EAAAA,YAAU,WACRb,GAAS4E,EAAAA,EAAAA,IAAeF,GACzB,GAAE,CAACA,IAEJ,IAAMG,GAASC,EAAAA,EAAAA,UAuBf,OACE,+BACE,gBAAK3C,UAAU,MAAf,UACE,UAAC,IAAD,CACEvC,OAAQA,EACRmF,KAAM,EACNlC,MAAO,CAAEmC,OAAQ,OAAQC,MAAO,QAChCC,IAAKL,EACLM,oBAAoB,EALtB,WAOE,SAAC,IAAD,CACEC,IAAI,qDACJC,YAAY,kIAGd,SAAC,IAAD,WACE,SAAC,IAAD,CACEC,SAAS,WACTC,UAvCS,SAACC,GACpB,IAAQC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,MACnB,GAAkB,YAAdD,EAAyB,CAC3B,IAAQE,EAAgBD,EAAhBC,YAERhB,GAAa,SAACiB,GAAD,wBACRA,GADQ,CAEX,CAAEhF,GAAI+E,EAAapG,QAASmG,EAAMG,aAAa,KAFpC,GAId,CACF,EA8BWC,UA5BS,SAACN,GACpB,IACYO,EACRP,EADFI,OAAUG,QAGZC,OAAOpE,OAAOmE,GAAS9B,KAAI,YAAsB,IAAnB0B,EAAkB,EAAlBA,YAC5BhB,GAAa,SAACiB,GAAD,OAAYA,EAAOK,QAAO,SAACC,GAAD,OAAOA,EAAEtF,KAAO+E,CAAhB,GAA1B,GACd,GACF,EAqBWQ,KAAM,CACJC,QAAQ,EACRD,MAAM,GAERE,KAAM,CACJC,WAAW,EACXC,QAAQ,EACRC,cAAc,EACdC,QAAQ,EACRC,UAAU,QAIjB,SAAC,IAAD,CAASC,UAAWlC,GAAgC,MACnD,SAACH,EAAD,CAAgB1E,OAAQA,UAKjC,C,iaCnFM,IAAMgH,EAAY,I,WCEnBC,EACJ,kHACIC,EAAoB,CAAC,GAAI,YAAa,aAAc,aAEpDC,EAAgB,CAAC,YACjBC,EAAW,cACXC,EAAoB,kBAEbC,EAAiBC,EAAAA,GAAW,CACvCC,OAAQD,EAAAA,KAAaE,SAAS,yCAC9BzE,KAAMuE,EAAAA,KAAaE,SAAS,4CAC5BC,WAAYH,EAAAA,KACTE,SAAS,0BACTE,KAAK,0BACLC,QAAQR,EAAU,8BACrBS,UAAWN,EAAAA,KACRE,SAAS,yBACTE,KAAK,yBACLC,QAAQR,EAAU,8BACrBU,MAAOP,EAAAA,KACJO,MAAM,+BACNL,SAAS,qBACZM,OAAQR,EAAAA,KACLE,SAAS,4BAETO,IAAI,GAAI,0CACRC,IAAI,GAAI,0CACXC,QAASX,EAAAA,KACNE,SAAS,uBACTE,KAAK,uBACLC,QAAQX,EAAY,8BACvBkB,IAAKZ,EAAAA,KAAaE,SAAS,qCAC3BW,aAAcb,EAAAA,KACXE,SAAS,8BACTE,KAAK,8BACRU,aAAcd,EAAAA,KAAaE,SACzB,8CAEFa,cAAef,EAAAA,KACZE,SAAS,8BACTE,KAAK,gCAGGY,EAAuBhB,EAAAA,GAAW,CAI7CiB,UAAWjB,EAAAA,KACRE,SAAS,4BAMD9F,EAAoB4F,EAAAA,GAAW,CAC1ChG,gBAAiBgG,EAAAA,KAAaE,SAAS,8BACvChG,SAAU8F,EAAAA,KAAaE,SACrB,iDAEFnH,SAAUiH,EAAAA,KAAaE,SAAS,oCAChCjI,YAAa+H,EAAAA,KAAYE,SAAS,yBAGvBgB,EAAmBlB,EAAAA,GAAW,CACzCG,WAAYH,EAAAA,KACTE,SAAS,0BACTE,KAAK,0BACLC,QAAQR,EAAU,8BACrBS,UAAWN,EAAAA,KACRE,SAAS,yBACTE,KAAK,yBACLC,QAAQR,EAAU,8BACrBU,MAAOP,EAAAA,KACJO,MAAM,+BACNL,SAAS,qBACTE,KAAK,qBACRI,OAAQR,EAAAA,KACLE,SAAS,4BAETO,IAAI,GAAI,0CACRC,IAAI,GAAI,0CACXS,OAAQnB,EAAAA,KAAaE,SAAS,yCAGnBkB,EAAuBpB,EAAAA,GAAW,CAC7C3E,KAAM2E,EAAAA,KAAaE,SAAS,oBAAoBE,KAAK,oBACrDiB,WAAYrB,EAAAA,KAAaE,SAAS,2BAA2BoB,WAC7DrB,OAAQD,EAAAA,KAAaE,SAAS,2BAA2BoB,WACzDC,aAAcvB,EAAAA,KAAaE,SAAS,8BAA8BoB,WAClEE,UAAWxB,EAAAA,KACRE,SAAS,0BACTuB,KACC,eACA,sCACA,SAAClI,GAAD,OAAWA,EAAQ,CAAnB,IAED8G,QAAQ,WAAY,kCACpBI,IAAI,EAAG,uCACPC,IAAI,EAAG,uCACVgB,aAAc1B,EAAAA,KACXE,SAAS,6BACTuB,KACC,eACA,sCACA,SAAClI,GAAD,OAAWA,EAAQ,CAAnB,IAED8G,QAAQ,WAAY,qCACpBI,IAAI,EAAG,0CACPC,IAAI,EAAG,0CACViB,aAAc3B,EAAAA,KACXE,SAAS,6BACTuB,KACC,eACA,sCACA,SAAClI,GAAD,OAAWA,EAAQ,CAAnB,IAED8G,QAAQ,WAAY,qCACpBI,IAAI,EAAG,0CACPC,IAAI,EAAG,0CACVkB,cAAe5B,EAAAA,KACZE,SAAS,8BACTuB,KACC,eACA,sCACA,SAAClI,GAAD,OAAWA,EAAQ,CAAnB,IAED8G,QAAQ,WAAY,sCACpBI,IAAI,EAAG,2CACPC,IAAI,EAAG,2CACVmB,YAAa7B,EAAAA,KACVE,SAAS,4BACTuB,KACC,eACA,sCACA,SAAClI,GAAD,OAAWA,EAAQ,CAAnB,IAED8G,QAAQ,WAAY,oCACpBI,IAAI,EAAG,yCACPC,IAAI,EAAG,yCACVoB,gBAAiB9B,EAAAA,KACdE,SAAS,2CACTuB,KACC,eACA,sCACA,SAAClI,GAAD,OAAWA,EAAQ,CAAnB,IAED8G,QAAQ,WAAY,mDACpBI,IAAI,EAAG,wDACPC,IAAI,EAAG,0DAGCqB,EAAgB/B,EAAAA,GAAW,CACtCxG,UAAWwG,EAAAA,KACRE,SAAS,yBACTE,KAAK,yBACR4B,SAAUhC,EAAAA,KACPE,SAAS,wBACTE,KAAK,0BAGG6B,EAAoBjC,EAAAA,GAAW,CAC1CG,WAAYH,EAAAA,KACTE,SAAS,0BACTG,QAAQR,EAAU,8BACrBS,UAAWN,EAAAA,KACRE,SAAS,yBACTG,QAAQR,EAAU,8BACrBU,MAAOP,EAAAA,KACJO,MAAM,+BACNL,SAAS,qBAQZM,OAAQR,EAAAA,KACLE,SAAS,4BAETO,IAAI,GAAI,0CACRC,IAAI,GAAI,4CAGAwB,EAAuBlC,EAAAA,GAAW,CAC7CG,WAAYH,EAAAA,KACTE,SAAS,0BACTG,QAAQR,EAAU,8BACrBS,UAAWN,EAAAA,KACRE,SAAS,yBACTG,QAAQR,EAAU,8BACrBW,OAAQR,EAAAA,KACLE,SAAS,4BAETO,IAAI,GAAI,0CACRC,IAAI,GAAI,0CACRR,SAAS,8BAGDiC,EAAuBnC,EAAAA,GAAW,CAC7CoC,KAAMpC,EAAAA,KACHE,SAAS,qBACTuB,KACC,OACA,gCACA,SAAClI,GAAD,OAAWA,GAASqG,EAAcyC,SAAS9I,EAAMkC,KAAjD,MAIO6G,EAAoBtC,EAAAA,GAAW,CAC1CG,WAAYH,EAAAA,KACTE,SAAS,0BACTE,KAAK,0BACLC,QAAQR,EAAU,8BACrBS,UAAWN,EAAAA,KACRE,SAAS,yBACTE,KAAK,yBACLC,QAAQR,EAAU,8BACrBU,MAAOP,EAAAA,KACJO,MAAM,+BACNL,SAAS,qBACZM,OAAQR,EAAAA,KACLE,SAAS,4BACTO,IAAI,GAAI,0CACRC,IAAI,GAAI,0CACX6B,QAASvC,EAAAA,KACNE,SAAS,uBACTG,QAAQ,WAAY,+BACpBI,IAAI,EAAG,oCACPC,IAAI,EAAG,oCACV9I,QAASoI,EAAAA,KACNE,SAAS,uBACTE,KAAK,uBACRO,QAASX,EAAAA,KACNE,SAAS,uBACTE,KAAK,uBACLC,QAAQX,EAAY,8BACvB3H,MAAOiI,EAAAA,KAAaE,SAAS,qBAC7BsC,SAAUxC,EAAAA,KAAaE,SAAS,wBAChCuC,QAASzC,EAAAA,KAAaE,SAAS,yBA2BpBwC,EAAiB1C,EAAAA,GAAW,CACvCoC,KAAMpC,EAAAA,KACHE,SAAS,oBACTuB,KACC,OACA,gCACA,SAAClI,GAAD,OAAWA,GAASqG,EAAcyC,SAAS9I,EAAMkC,KAAjD,MAIOkH,EAAkB3C,EAAAA,GAAW,CACxC3E,KAAM2E,EAAAA,KACHE,SAAS,2BACTE,KAAK,2BACRwC,UAAW5C,EAAAA,KAAaE,SAAS,0BACjC2C,QAAS7C,EAAAA,KAAaE,SAAS,wBAC/B4C,aAAc9C,EAAAA,KACXE,SAAS,qBACTuB,KACC,YACA,0BACA,SAAClI,GAAD,OAAWA,GAASA,EAAMwJ,MAAQtD,CAAlC,IAEDgC,KACC,aACA,yCACA,SAAClI,GAAD,OAAWA,GAASoG,EAAkB0C,SAAS9I,EAAMkC,KAArD,MAIOuH,EAAqBhD,EAAAA,GAAW,CAC3C3E,KAAM2E,EAAAA,KACHE,SAAS,2BACTE,KAAK,2BACRwC,UAAW5C,EAAAA,KAAaE,SAAS,0BACjC2C,QAAS7C,EAAAA,KAAaE,SAAS,0BAGpB+C,EAAcjD,EAAAA,GAAW,CACpCO,MAAOP,EAAAA,KAAaE,SAAS,qBAC7BgD,SAAUlD,EAAAA,KAAaE,SAAS,0BAGrBiD,EAAgBnD,EAAAA,GAAW,CACtCoD,aAAcpD,EAAAA,KACXyB,KAAK,YAAa,0BAA0B,SAAClI,GAC5C,OAAKA,GAGEA,EAAMwJ,MAAQtD,CACtB,IACAgC,KAAK,WAAY,yCAAyC,SAAClI,GAC1D,OAAKA,GAGE,CAAC,YAAa,aAAc,aAAa8I,SAAS9I,EAAMkC,KAChE,IACH0E,WAAYH,EAAAA,KACTE,SAAS,oBACTG,QAAQR,EAAU,8BACrBS,UAAWN,EAAAA,KACRE,SAAS,oBACTG,QAAQR,EAAU,8BACrBW,OAAQR,EAAAA,KACLE,SAAS,4BACTO,IAAI,GAAI,0CACRC,IAAI,GAAI,0CACX2C,gBAAiBrD,EAAAA,KACdE,SAAS,+BACTE,KAAK,+BACRkD,aAActD,EAAAA,KACXE,SAAS,4BACTE,KAAK,4BACLC,QAAQR,EAAU,8BACrB0D,WAAYvD,EAAAA,KACTE,SAAS,0BACTO,IAAI,EAAG,4BACPC,IAAI,EAAG,4BACPL,QAAQP,EAAmB,kCAC3BM,KAAK,0BACRqC,QAASzC,EAAAA,KACNE,SAAS,uBACTE,KAAK,uBACLC,QAAQR,EAAU,gCAGV2D,EAAexD,EAAAA,GAAW,CACrCyD,MAAOzD,EAAAA,KACJE,SAAS,qBACTG,QAAQP,EAAmB,kCAC9B4D,YAAa1D,EAAAA,KAAaE,SAAS,iCACnCyD,WAAY3D,EAAAA,KACTE,SAAS,yBACTG,QAAQP,EAAmB,kCAC9B8D,WAAY5D,EAAAA,KAAaE,SAAS,0BAClC2D,SAAU7D,EAAAA,KACPE,SAAS,wBACTG,QAAQ,WAAY,uBACpBK,IAAI,EAAG,kCACVoD,WAAY9D,EAAAA,KAAaE,SAAS,4B","sources":["dispatcherPanel/views/GeoFence/Modal/AddGeoFence.js","dispatcherPanel/views/GeoFence/map/AutoCompleteCity.js","dispatcherPanel/views/GeoFence/map/LeafLet.js","utils/HandlerCommonFile.js","validateSchema/Schema.js"],"sourcesContent":["import {\n  CButton,\n  CCard,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormTextarea,\n  CRow,\n} from \"@coreui/react\";\nimport { CCardBody } from \"@coreui/react-pro\";\nimport { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { getTeams } from \"src/features/teams/TeamSlice\";\nimport AutuCompleteCity from \"../map/AutoCompleteCity\";\nimport * as Yup from \"yup\";\nimport { addGeoFence } from \"src/features/geoFence/GeoFenceSlice\";\nimport PolygonMap from \"../map/LeafLet\";\nimport Spinner from \"src/spinner/Spinner\";\nimport { AddGeoFenceSchema } from \"src/validateSchema/Schema\";\n\nconst AddGeoFence = () => {\n  const [address, setAdress] = useState(\"\");\n  const { coordinates, isLoader } = useSelector((state) => state.geoFen);\n  const coordint = coordinates[0]?.latlngs;\n  const team = useSelector((state) => state.team.teamsList);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [center, setCenter] = useState([30.682421, 76.727631]);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const teamName = selectedOption?.label;\n  const testArray = [];\n  const data = team?.teamList;\n  data?.forEach((item) => {\n    testArray.push({\n      value: `${item.team_name}`,\n      label: `${item.team_name}`,\n      value: item.id,\n    });\n  });\n\n  useEffect(() => {\n    dispatch(getTeams());\n  }, []);\n  useEffect(() => {\n    console.log(center);\n  }, [center]);\n  const {\n    values,\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    errors,\n    touched,\n    setFieldValue,\n    resetForm,\n  } = useFormik({\n    initialValues: {\n      geofencing_name: \"\",\n      description: \"\",\n      location: address,\n      teamName: teamName,\n      coordinates: coordint,\n    },\n\n    validationSchema: AddGeoFenceSchema,\n    onSubmit: async (data, { resetForm }) => {\n      try {\n        await dispatch(\n          addGeoFence({\n            geofencing_name: data.geofencing_name,\n            description: data.description,\n            location: address,\n            coordinates: coordint,\n            teamName: teamName,\n            navigate,\n          })\n        ).unwrap();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n  });\n\n  useEffect(() => {\n    setFieldValue(\"teamName\", teamName);\n    setFieldValue(\"location\", address);\n    setFieldValue(\"coordinates\", coordint);\n  }, [teamName, address, coordint]);\n\n  return (\n    <CCard className=\"mb-4\">\n      {isLoader ? <Spinner className=\"modal-spinner\" /> : null}\n      <CCardBody>\n        <CForm onSubmit={handleSubmit}>\n          <CRow>\n            <CCol md={4}>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Select Team<span className=\"text-danger\">*</span>\n                </label>\n                <Select\n                  className=\"addGeoFence-dropdown\"\n                  classNamePrefix=\"Select\"\n                  isClearable\n                  name=\"teamName\"\n                  onChange={setSelectedOption}\n                  options={testArray}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.teamName && errors.teamName ? (\n                    <span className=\"validtion-error\">{errors.teamName}</span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Location<span className=\"text-danger\">*</span>\n                </label>\n                <AutuCompleteCity\n                  setAdress={setAdress}\n                  address={address}\n                  setCenter={setCenter}\n                />\n                <div className=\"error-container\">\n                  {touched.location && errors.location ? (\n                    <span className=\"validtion-error\">{errors.location}</span>\n                  ) : null}\n                </div>\n                {/* <span className=\"validtion-error\">{addressError}</span> */}\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  GeoFence Name<span className=\"text-danger\">*</span>\n                </label>\n                <CFormInput\n                  type=\"text\"\n                  id=\"validationServer01\"\n                  name=\"geofencing_name\"\n                  className=\"addGeoFence-geofencing_name\"\n                  value={values.geofencing_name}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n                <div className=\"error-container\">\n                  {touched.geofencing_name && errors.geofencing_name ? (\n                    <span className=\"validtion-error\">\n                      {errors.geofencing_name}\n                    </span>\n                  ) : null}\n                </div>\n              </CCol>\n              <CCol md={12} className=\"mt-2\">\n                <label className=\"\" htmlFor=\"validationServer01\">\n                  Description{\" \"}\n                  <span style={{ fontSize: \"12px\" }}>(Optional) </span>\n                </label>\n                <CFormTextarea\n                  id=\"validationServer01\"\n                  name=\"description\"\n                  className=\"addGeoFence-geofencing_name\"\n                  value={values.description}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                />\n              </CCol>\n              <CCol\n                md={12}\n                className=\"d-flex justify-content-between mt-2 gap-5\"\n              >\n                <CButton\n                  color=\"secondary\"\n                  className=\"w-50 text-white\"\n                  onClick={() => navigate(\"/dispatcher/geoFence\")}\n                >\n                  Cancel\n                </CButton>\n                <CButton type=\"submit\" color=\"info\" className=\"w-50 text-white\">\n                  Submit\n                </CButton>\n              </CCol>\n            </CCol>\n            <CCol md={8}>\n              {/* <AutoCom /> */}\n              <div className=\"mt-2\">\n                <span style={{ marginLeft: \"15px\" }}>\n                  <div className=\"error-container\">\n                    {touched.coordinates && errors.coordinates ? (\n                      <span className=\"validtion-error\">\n                        {errors.coordinates}\n                      </span>\n                    ) : null}\n                  </div>\n                </span>\n                <PolygonMap center={center} />\n              </div>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CCardBody>\n    </CCard>\n  );\n};\n\nexport default AddGeoFence;\n","import { CFormInput } from \"@coreui/react\";\nimport React from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  geocodeByPlaceId,\n  getLatLng,\n} from \"react-places-autocomplete\";\nconst AutuCompleteCity = ({ setAdress, address, setCenter, disabled }) => {\n\n  const handleSelect = async (value) => {\n    const results = await geocodeByAddress(value);\n    const ll = await getLatLng(results[0]);\n    setAdress(value);\n    const lat = ll?.lat;\n    const lng = ll?.lng;\n    setCenter([lat, lng]);\n  };\n  return (\n    <>\n      <PlacesAutocomplete\n        value={address}\n        onChange={setAdress}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\n          return (\n            <div>\n              <CFormInput\n                {...getInputProps({\n                  placeholder: \"Search Places ...\",\n                  className: \"location-search-input-addgeofence\",\n                })}\n                className=\"addGeoFence-geofencing_name\"\n                disabled={disabled !== undefined ? true : false}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? \"suggestion-item--active\"\n                    : \"suggestion-item\";\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          );\n        }}\n      </PlacesAutocomplete>\n    </>\n  );\n};\n\nexport default AutuCompleteCity;\n","import React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, FeatureGroup, useMap, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { useRef } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {  setCoordinates } from \"src/features/geoFence/GeoFenceSlice\";\nfunction SetViewOnClick({ center }) {\n  const map = useMap();\n  map.flyTo(center,11);\n  return null;\n}\nconst PolygonMap = ({ center,polygonCoords }) => {\n  const [mapLayers, setMapLayers] = useState([]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setCoordinates(mapLayers));\n  }, [mapLayers]);\n\n  const mapRef = useRef();\n\n  const handleCreate = (e) => {\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n      setMapLayers((layers) => [\n        ...layers,\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      ]);\n    }\n  };\n\n  const handleDelete = (e) => {\n    const {\n      layers: { _layers },\n    } = e;\n\n    Object.values(_layers).map(({ _leaflet_id }) => {\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n    });\n  };\n  return (\n    <>\n      <div className=\"col\">\n        <MapContainer\n          center={center}\n          zoom={4}\n          style={{ height: \"60vh\", width: \"100%\" }}\n          ref={mapRef}\n          attributionControl={false}\n        >\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"https://www.maptiler.com/\">MapTiler</a> &copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n\n          <FeatureGroup>\n            <EditControl\n              position=\"topright\"\n              onCreated={handleCreate}\n              onDeleted={handleDelete}\n              edit={{\n                remove: true,\n                edit: false\n              }}\n              draw={{\n                rectangle: false,\n                circle: false,\n                circlemarker: false,\n                marker: false,\n                polyline: false,\n              }}\n            />\n          </FeatureGroup>\n         <Polygon positions={polygonCoords ? polygonCoords : []} />\n          <SetViewOnClick center={center} />\n        </MapContainer>\n      </div>\n    </>\n  );\n};\n\nexport default PolygonMap;\n","export const FILE_SIZE = 5000000\n\n","import { FILE_SIZE } from \"src/utils/HandlerCommonFile\";\nimport * as Yup from \"yup\";\nconst regWebsite =\n  /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\nconst SUPPORTED_FORMATS = [\"\", \"image/jpg\", \"image/jpeg\", \"image/png\"];\n\nconst SUPPORTED_CSV = [\"text/csv\"];\nconst regMatch = /^[a-zA-Z]*$/;\nconst alphaNumericRegex = /^[a-zA-Z0-9_]*$/;\n\nexport const AgentAddSchema = Yup.object({\n  teamId: Yup.string().required(\"Please Select Team Id, It is required\"),\n  type: Yup.string().required(\"Please Select Agent Type, It is required\"),\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  dob: Yup.string().required(\"Please Select DOB, It is required\"),\n  plate_number: Yup.string()\n    .required(\"Vehicle Number is required\")\n    .trim(\"Vehicle Number is required\"),\n  vehicle_type: Yup.string().required(\n    \"Please Select Vehicle Type, It is required\"\n  ),\n  delivery_area: Yup.string()\n    .required(\"Delievery Area is required\")\n    .trim(\"Delievery Area is required\"),\n});\n\nexport const AutoAlloactionSchema = Yup.object({\n  // autoAllocationType: Yup.string().required(\n  //   \"Please Select Auto Allocation Type\"\n  // ),\n  maxRadius: Yup.string()\n    .required(\"Max Raduis is Required\")\n    // .matches(/^[0-9]+$/, \"Max Raduis must be only number\")\n    // .min(1, \"Raduis must be between 100m and 9 km\")           \n    // .max(1, \"Raduis must be between 100m and 9 km\"),\n});\n\nexport const AddGeoFenceSchema = Yup.object({\n  geofencing_name: Yup.string().required(\"Geo Fence Name is Required\"),\n  location: Yup.string().required(\n    \"Location is Required, and Assign Area to Team\"\n  ),\n  teamName: Yup.string().required(\"Select Team Name, It is Required\"),\n  coordinates: Yup.array().required(\"Assign Area to Team\"),\n});\n\nexport const AddManagerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\")\n    .trim(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  status: Yup.string().required(\"Please Select Status, It's required\"),\n});\n\nexport const AddPricingRuleSchema = Yup.object({\n  name: Yup.string().required(\"Name is Required\").trim(\"Name is Required\"),\n  geoFenceId: Yup.string().required(\"Please Select Geo Fence\").nullable(),\n  teamId: Yup.string().required(\"Please Select Team Name\").nullable(),\n  agentVehicle: Yup.string().required(\"Please Select Vehicle Type\").nullable(),\n  basePrice: Yup.string()\n    .required(\"Base Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Price must be only number\")\n    .min(0, \"Base Price must be exactly 0 digits\")\n    .max(4, \"Base Price must be exactly 4 digits\"),\n  baseDuration: Yup.string()\n    .required(\"Base Duration is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Duration must be only number\")\n    .min(0, \"Base Duration must be exactly 0 digits\")\n    .max(4, \"Base Duration must be exactly 4 digits\"),\n  baseDistance: Yup.string()\n    .required(\"Base Distance is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Base Distance must be only number\")\n    .min(0, \"Base Distance must be exactly 0 digits\")\n    .max(4, \"Base Distance must be exactly 4 digits\"),\n  DurationPrice: Yup.string()\n    .required(\"Duration Price is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Duration Price must be only number\")\n    .min(0, \"Duration Price must be exactly 0 digits\")\n    .max(4, \"Duration Price must be exactly 4 digits\"),\n  DistanceFee: Yup.string()\n    .required(\"Distance Fee is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Distance Fee must be only number\")\n    .min(0, \"Distance Fee must be exactly 0 digits\")\n    .max(4, \"Distance Fee must be exactly 4 digits\"),\n  agentCommPercnt: Yup.string()\n    .required(\"Agent Commission Percentage is Required\")\n    .test(\n      \"Is positive?\",\n      \"The number must be greater than 0!\",\n      (value) => value > 0\n    )\n    .matches(/^[0-9]+$/, \"Agent Commission Percentage must be only number\")\n    .min(0, \"Agent Commission Percentage must be exactly 0 digits\")\n    .max(4, \"Agent Commission Percentage must be exactly 4 digits\"),\n});\n\nexport const AddTeamSchema = Yup.object({\n  team_name: Yup.string()\n    .required(\"Team Name is required\")\n    .trim(\"Team Name is required\"),\n  team_tag: Yup.string()\n    .required(\"Team tag is required\")\n    .trim(\"Team tag is required\"),\n});\n\nexport const AddCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  // image: Yup.string().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   ),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number Must be exactly 10 digits\")\n    .max(13, \"Phone number Must be exactly 10 digits\"),\n});\n\nexport const UpdateCustomerSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    // .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\")\n    .required(\"Phone number is required\"),\n});\n\nexport const ImportCustomerSchema = Yup.object({\n  file: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMerchantSchema = Yup.object({\n  first_name: Yup.string()\n    .required(\"First Name is required\")\n    .trim(\"First Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Last Name is required\")\n    .trim(\"Last Name is required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  email: Yup.string()\n    .email(\"Email must be a valid email\")\n    .required(\"Email is required\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  pincode: Yup.string()\n    .required(\"Pincode is required\")\n    .matches(/^[0-9]+$/, \"Pincode must be only number\")\n    .min(6, \"Pincode must be exactly 6 digits\")\n    .max(6, \"Pincode must be exactly 6 digits\"),\n  address: Yup.string()\n    .required(\"Address is required\")\n    .trim(\"Address is required\"),\n  website: Yup.string()\n    .required(\"Website is required\")\n    .trim(\"Website is required\")\n    .matches(regWebsite, \"Enter correct website url!\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  country: Yup.string().required(\"Country is required\"),\n  // logo: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n  // bannerImage: Yup.mixed().notRequired()\n  //   // .required(\" File is required\")\n  //   .test(\n  //     \"fileFormat\",\n  //     \"You can upload only jpg,png,jpeg file\",\n  //     (value) => value && SUPPORTED_FORMATS.includes(value.type)\n  //   )\n  //   .test(\n  //     \"file_size\",\n  //     \"File Size is too large\",\n  //     (value) => value && value.size <= FILE_SIZE\n  //   ),\n});\n\nexport const ImportMerchant = Yup.object({\n  file: Yup.mixed()\n    .required(\"File is required\")\n    .test(\n      \"type\",\n      \"You can upload only CSV file\",\n      (value) => value && SUPPORTED_CSV.includes(value.type)\n    ),\n});\n\nexport const AddMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n  bannerImages: Yup.mixed()\n    .required(\" File is required\")\n    .test(\n      \"file_size\",\n      \"File Size is too large\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"You can upload only jpg,png,jpeg file\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const UpdateMobileBanner = Yup.object({\n  name: Yup.string()\n    .required(\"Banner Name is Required\")\n    .trim(\"Banner Name is Required\"),\n  startDate: Yup.string().required(\"Start Date is Required\"),\n  endDate: Yup.string().required(\"End Date is Required\"),\n});\n\nexport const LoginSchema = Yup.object({\n  email: Yup.string().required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport const ProfileSchema = Yup.object({\n  profileImage: Yup.mixed()\n    .test(\"file_size\", \"File Size is too large\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return value.size <= FILE_SIZE;\n    })\n    .test(\"fileType\", \"You can upload only jpg,png,jpeg file\", (value) => {\n      if (!value) {\n        return true;\n      }\n      return [\"image/jpg\", \"image/jpeg\", \"image/png\"].includes(value.type);\n    }),\n  first_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  last_name: Yup.string()\n    .required(\"Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  mobile: Yup.string()\n    .required(\"Phone number is required\")\n    .min(13, \"Phone number must be exactly 10 digits\")\n    .max(13, \"Phone number must be exactly 10 digits\"),\n  company_address: Yup.string()\n    .required(\"Company Address is Required\")\n    .trim(\"Company Address is Required\"),\n  company_name: Yup.string()\n    .required(\"Company Name is Required\")\n    .trim(\"Company Name is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n  short_code: Yup.string()\n    .required(\"Short Code is Required\")\n    .min(6, \"Must be exactly 6 digits\")\n    .max(6, \"Must be exactly 6 digits\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\")\n    .trim(\"Short Code is Required\"),\n  country: Yup.string()\n    .required(\"Country is Required\")\n    .trim(\"Country is Required\")\n    .matches(regMatch, \"Only alphabets are allowed\"),\n});\n\nexport const AddPromocode = Yup.object({\n  Title: Yup.string()\n    .required(\"Title is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Description: Yup.string().required(\"Short Description is required\"),\n  promo_code: Yup.string()\n    .required(\"Promocode is required\")\n    .matches(alphaNumericRegex, \"Special Characters not allowed\"),\n  Promo_Type: Yup.string().required(\"Promo type is required\"),\n  discount: Yup.string()\n    .required(\"Discount is required\")\n    .matches(/^[0-9]+$/, \"Must be only number\")\n    .max(2, \"Amount should be less than 100\"),\n  ExpiryDate: Yup.string().required(\"Expire Date is required\"),\n});\n"],"names":["useState","address","setAdress","useSelector","state","geoFen","coordinates","isLoader","coordint","latlngs","team","teamsList","selectedOption","setSelectedOption","center","setCenter","navigate","useNavigate","dispatch","useDispatch","teamName","label","testArray","data","teamList","forEach","item","push","value","team_name","id","useEffect","getTeams","console","log","useFormik","initialValues","geofencing_name","description","location","validationSchema","AddGeoFenceSchema","onSubmit","resetForm","addGeoFence","unwrap","values","handleBlur","handleChange","handleSubmit","errors","touched","setFieldValue","className","md","htmlFor","classNamePrefix","isClearable","name","onChange","options","onBlur","type","style","fontSize","color","onClick","marginLeft","disabled","handleSelect","geocodeByAddress","results","getLatLng","ll","lat","lng","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","undefined","map","suggestion","active","backgroundColor","cursor","SetViewOnClick","useMap","flyTo","polygonCoords","mapLayers","setMapLayers","setCoordinates","mapRef","useRef","zoom","height","width","ref","attributionControl","url","attribution","position","onCreated","e","layerType","layer","_leaflet_id","layers","getLatLngs","onDeleted","_layers","Object","filter","l","edit","remove","draw","rectangle","circle","circlemarker","marker","polyline","positions","FILE_SIZE","regWebsite","SUPPORTED_FORMATS","SUPPORTED_CSV","regMatch","alphaNumericRegex","AgentAddSchema","Yup","teamId","required","first_name","trim","matches","last_name","email","mobile","min","max","website","dob","plate_number","vehicle_type","delivery_area","AutoAlloactionSchema","maxRadius","AddManagerSchema","status","AddPricingRuleSchema","geoFenceId","nullable","agentVehicle","basePrice","test","baseDuration","baseDistance","DurationPrice","DistanceFee","agentCommPercnt","AddTeamSchema","team_tag","AddCustomerSchema","UpdateCustomerSchema","ImportCustomerSchema","file","includes","AddMerchantSchema","pincode","district","country","ImportMerchant","AddMobileBanner","startDate","endDate","bannerImages","size","UpdateMobileBanner","LoginSchema","password","ProfileSchema","profileImage","company_address","company_name","short_code","AddPromocode","Title","Description","promo_code","Promo_Type","discount","ExpiryDate"],"sourceRoot":""}